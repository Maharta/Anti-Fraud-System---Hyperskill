type: edu
files:
- name: src/antifraud/AntiFraudApplication.java
  visible: true
  text: |-
    package antifraud;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class AntiFraudApplication {
        public static void main(String[] args) {
            SpringApplication.run(AntiFraudApplication.class, args);
        }
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    server.error.include-message=always
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
    spring.jackson.serialization.INDENT_OUTPUT=true
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    plugins {
        id 'java'
        id 'org.springframework.boot' version '2.3.1.RELEASE'
        id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    }


    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'com.h2database:h2'
        implementation group: 'org.hibernate', name: 'hibernate-validator', version: '6.1.0.Final'
    }
  learner_created: false
- name: test/AntiFraudTest.java
  visible: false
  text: |-
    import antifraud.AntiFraudApplication;
    import com.google.gson.JsonArray;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.UnexpectedError;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.request.HttpRequest;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.ArrayList;
    import java.util.List;

    import static org.hyperskill.hstest.common.JsonUtils.getJson;
    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    class TestHint {
        private final String apiPath;
        private final String requestBody;
        private final String message;

        public TestHint(String apiPath, String requestBody, String message) {
            this.apiPath = apiPath;
            this.requestBody = requestBody;
            this.message = message;
        }

        @Override
        public String toString() {
            return "Test case\n" +
                    "Testing api: '" + apiPath + '\'' + "\n" +
                    (requestBody.length() > 0 ? "request: '" + requestBody + '\'' + "\n" : "") +
                    "Expectations: '" + message + "'" + "\n" +
                    "-----";
        }
    }

    public class AntiFraudTest extends SpringTest {

        private final String transactionApi = "/api/antifraud/transaction";
        private final String userApi = "/api/auth/user";
        private final String userListApi = "/api/auth/list";
        private final String lockApi = "/api/auth/access";
        private final String roleApi = "/api/auth/role";
        List<Integer> userIdList = new ArrayList<>();

        private final String administrator = "{\n" +
                "   \"name\": \"administrator\",\n" +
                "   \"username\": \"administrator\",\n" +
                "   \"password\": \"oMoa4VvqnLxW\"\n" +
                "}";

        private final String johndoe1 = "{\n" +
                "   \"name\": \"John Doe 1\",\n" +
                "   \"username\": \"johndoe1\",\n" +
                "   \"password\": \"oMoa3VvqnLxW\"\n" +
                "}";

        private final String johndoe2 = "{\n" +
                "   \"name\": \"John Doe 2\",\n" +
                "   \"username\": \"johndoe2\",\n" +
                "   \"password\": \"oMoa5VvqnLxW\"\n" +
                "}";

        private final String johndoe3 = "{\n" +
                "   \"name\": \"John Doe 3\",\n" +
                "   \"username\": \"johndoe3\",\n" +
                "   \"password\": \"oMoa6VvqnLxW\"\n" +
                "}";

        private final String wronguser1 = "{\n" +
                "   \"name\": \"John Doe 1\",\n" +
                "   \"password\": \"oa3VvqnLxW\"\n" +
                "}";

        private final String wronguser2 = "{\n" +
                "   \"name\": \"John Doe 2\",\n" +
                "   \"username\": \"johndoe1\"\n" +
                "}";

        private final String wronguserCred1 = "{\n" +
                "   \"name\": \"John Doe 1\",\n" +
                "   \"username\": \"johndoe1\",\n" +
                "   \"password\": \"oa3VvqnLxW\"\n" +
                "}";

        private final String wronguserCred2 = "{\n" +
                "   \"name\": \"John Do\",\n" +
                "   \"username\": \"johndo\",\n" +
                "   \"password\": \"oMoa3VvqnLxW\"\n" +
                "}";

        private final String listAnswer1 = "[ {\n" +
                "  \"id\" : 1,\n" +
                "  \"name\" : \"administrator\",\n" +
                "  \"username\" : \"administrator\",\n" +
                "  \"role\" : \"ADMINISTRATOR\"\n" +
                "}, {\n" +
                "  \"id\" : 2,\n" +
                "  \"name\" : \"John Doe 1\",\n" +
                "  \"username\" : \"johndoe1\",\n" +
                "  \"role\" : \"MERCHANT\"\n" +
                "}, {\n" +
                "  \"id\" : 4,\n" +
                "  \"name\" : \"John Doe 2\",\n" +
                "  \"username\" : \"johndoe2\",\n" +
                "  \"role\" : \"MERCHANT\"\n" +
                "} ]";

        private final String listAnswer2 = "[ {\n" +
                "  \"id\" : 1,\n" +
                "  \"name\" : \"administrator\",\n" +
                "  \"username\" : \"administrator\",\n" +
                "  \"role\" : \"ADMINISTRATOR\"\n" +
                "}, {\n" +
                "  \"id\" : 4,\n" +
                "  \"name\" : \"John Doe 2\",\n" +
                "  \"username\" : \"johndoe2\",\n" +
                "  \"role\" : \"MERCHANT\"\n" +
                "} ]";

        private final String listAnswer3 = "[ {\n" +
                "  \"id\" : 1,\n" +
                "  \"name\" : \"administrator\",\n" +
                "  \"username\" : \"administrator\",\n" +
                "  \"role\" : \"ADMINISTRATOR\"\n" +
                "}, {\n" +
                "  \"id\" : 4,\n" +
                "  \"name\" : \"John Doe 2\",\n" +
                "  \"username\" : \"johndoe2\",\n" +
                "  \"role\" : \"SUPPORT\"\n" +
                "} ]";

        public AntiFraudTest() {
            super(AntiFraudApplication.class, "../service_db.mv.db");
        }

        /**
         * Method for restarting application
         *
         */
        private CheckResult restartApplication() {
            try {
                reloadSpring();
            } catch (Exception ex) {
                throw new UnexpectedError(ex.getMessage());
            }
            return CheckResult.correct();
        }

        private HttpResponse checkResponseStatus(String user, String body,
                                                 int status, String api, String method) {
            HttpRequest request = null;
            switch (method) {
                case "GET":
                    request = get(api);
                    break;
                case "POST":
                    request = post(api, body);
                    break;
                case "PUT":
                    request = put(api, body);
                    break;
                case "DELETE":
                    request = delete(api);
                    break;
            }

            if (user != null) {
                JsonObject userJson = getJson(user).getAsJsonObject();
                String password = userJson.get("password").getAsString();
                String login = userJson.get("username").getAsString().toLowerCase();
                request = request.basicAuth(login, password);
            }
            HttpResponse response = request.send();

            if (response.getStatusCode() != status) {
                throw new WrongAnswer(method + " " + api  + " should respond with "
                        + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                        + "Response body:\n" + response.getContent() + "\n");
            }
            return response;
        }

        public boolean isNumeric(String strNum) {
            if (strNum == null) {
                return false;
            }
            try {
                long l = Long.parseLong(strNum);
            } catch (NumberFormatException nfe) {
                return false;
            }
            return true;
        }

        CheckResult testAddUser(String body, int status, String role, TestHint hint) {

            System.out.println(hint.toString());

            HttpResponse response = checkResponseStatus(null, body, status, userApi, "POST");

            if (response.getStatusCode() == 201) {

                JsonObject rightResponse = getJson(body).getAsJsonObject();
                rightResponse.remove("password");

                // Check is it JSON in response or something else
                if (!response.getJson().isJsonObject()) {
                    return CheckResult.wrong("Wrong object in response, expected JSON but was \n" +
                            response.getContent().getClass());

                }

                JsonObject jsonResponse = response.getJson().getAsJsonObject();

                // Check if password is presence in response
                if (jsonResponse.get("password") != null) {
                    return CheckResult.wrong("You must remove password from response\n" +
                            jsonResponse);
                }

                if (jsonResponse.get("id") == null) {
                    return CheckResult.wrong("Response must contain user ID\n" +
                            "Received response:\n" +
                            jsonResponse);
                }

                if (jsonResponse.get("id").isJsonNull()) {
                    return CheckResult.wrong("Response must contain user ID\n" +
                            "Received response:\n" +
                            jsonResponse);
                }

                if (userIdList.contains(jsonResponse.get("id").getAsInt())) {
                    return CheckResult.wrong("User ID must be unique!\n" +
                            "Received response:\n" +
                            jsonResponse);
                }

                rightResponse.addProperty("id", jsonResponse.get("id").toString());
                // Check JSON in response
                expect(response.getContent()).asJson().check(
                        isObject()
                                .value("id", isInteger())
                                .value("name", rightResponse.get("name").getAsString())
                                .value("role", role)
                                .value("username", isString(s -> s.equalsIgnoreCase(rightResponse.get("username").getAsString())))
                );
                userIdList.add(jsonResponse.get("id").getAsInt());
            }
            return CheckResult.correct();
        }

        CheckResult testDeleteUser(String body, int status, String user, TestHint hint) {

            System.out.println(hint.toString());

            HttpResponse response = checkResponseStatus(body, "", status, userApi + "/" + user, "DELETE");

            if (response.getStatusCode() == 200) {

                // Check is it JSON in response or something else
                if (!response.getJson().isJsonObject()) {
                    return CheckResult.wrong("Wrong object in response, expected JSON but was \n" +
                            response.getContent().getClass());

                }

                JsonObject jsonResponse = response.getJson().getAsJsonObject();

                // Check JSON in response
                expect(response.getContent()).asJson().check(
                        isObject()
                                .value("status", "Deleted successfully!")
                                .value("username", isString(s -> s.equalsIgnoreCase(user)))
                );
            }
            return CheckResult.correct();
        }

        private CheckResult testListUser(String user, int status, String answer,
                                         int position, TestHint hint) {

            System.out.println(hint.toString());

            HttpResponse response = checkResponseStatus(user, "", status, userListApi, "GET");

            if (response.getStatusCode() == 200) {
                // Check is it array of JSON in response or something else
                if (!response.getJson().isJsonArray()) {
                    return CheckResult.wrong("Wrong object in response, expected array of JSON but was \n" +
                            response.getContent().getClass());

                }

                JsonArray correctJson = getJson(answer).getAsJsonArray();
                JsonArray responseJson = getJson(response.getContent()).getAsJsonArray();
                if (responseJson.size() == 0) {
                    throw new WrongAnswer("Empty array in response!");
                }

                if (responseJson.size() != position + 1) {
                    throw new WrongAnswer("Incorrect number - " +  responseJson.size() +
                            " users in response, must be - " + (position + 1));
                }

                // Check JSON in response
                expect(responseJson.get(position).toString()).asJson().check(
                        isObject()
                                .value("id", isInteger())
                                .value("name", correctJson.get(position).getAsJsonObject().get("name").getAsString())
                                .value("role", correctJson.get(position).getAsJsonObject().get("role").getAsString())
                                .value("username",
                                        isString(s -> s.equalsIgnoreCase(correctJson.get(position).getAsJsonObject()
                                                .get("username").getAsString()))
                                ));

            }
            return CheckResult.correct();
        }

        private CheckResult testLock(String api, String user, int status, String operation, String username, TestHint hint) {
            System.out.println(hint.toString());

            JsonObject jsonBody = new JsonObject();
            jsonBody.addProperty("username", username);
            jsonBody.addProperty("operation", operation);

            HttpResponse response = checkResponseStatus(user, jsonBody.toString(), status, api, "PUT");
            if (response.getStatusCode() == 200) {
                expect(response.getContent()).asJson().check(
                        isObject()
                                .value("status", isString(s ->
                                        s.equalsIgnoreCase("User " + username + " " + operation + "ed!"))));
            }
            return CheckResult.correct();
        }

        private CheckResult testRole(String api, String user, int status, String role, String username, TestHint hint) {
            System.out.println(hint.toString());

            JsonObject jsonBody = new JsonObject();
            jsonBody.addProperty("username", username);
            jsonBody.addProperty("role", role);

            HttpResponse response = checkResponseStatus(user, jsonBody.toString(), status, api, "PUT");

            if (response.getStatusCode() == 200) {
                expect(response.getContent()).asJson().check(
                        isObject()
                                .value("id", isInteger())
                                .value("name", isString())
                                .value("role", role)
                                .value("username", isString(s -> s.equalsIgnoreCase(username))));
            }
            return CheckResult.correct();
        }

        private CheckResult testTransaction(String user, String api, String method,
                                            int status, String amount, String answer, TestHint hint) {

            System.out.println(hint.toString());

            JsonObject jsonBody = new JsonObject();
            if (isNumeric(amount)) {
                jsonBody.addProperty("amount", Long.parseLong(amount));
            } else if (amount == null) {
                jsonBody.addProperty("amount", (Boolean) null);
            } else if (!amount.equals("empty")) {
                jsonBody.addProperty("amount", amount);
            }

            HttpResponse response = checkResponseStatus(user, jsonBody.toString(), status, api, method);

            // Check JSON in response
            if (response.getStatusCode() == 200) {
                expect(response.getContent()).asJson().check(
                        isObject()
                                .value("result", answer));
            }
            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dt = new DynamicTesting[]{
                // Test POST request for signup api
                () -> testAddUser(wronguser1, 400, "MERCHANT",
                        new TestHint(userApi, wronguser1, "In case of wrong data in request, endpoint" +
                                " must respond with BAD REQUEST  status (400).")), // 1

                () -> testAddUser(wronguser2, 400, "MERCHANT",
                        new TestHint(userApi, wronguser2, "In case of wrong data in request, endpoint" +
                                " must respond with BAD REQUEST  status (400).")), // 2

                () -> testAddUser(administrator, 201, "ADMINISTRATOR",
                        new TestHint(userApi, johndoe1, "If user successfully added, endpoint" +
                                " must respond with HTTP CREATED status (201) ")), // 3

                () -> testListUser(administrator, 200,  listAnswer1, 0,
                        new TestHint(userListApi, "", "Endpoint must respond with HTTP OK status (200)" +
                                " and body with array of objects representing the users sorted by ID in ascending order.")), // 4


                () -> testAddUser(johndoe1, 201, "MERCHANT",
                        new TestHint(userApi, johndoe1, "If user successfully added, endpoint" +
                                " must respond with HTTP CREATED status (201) ")), // 5

                () -> testListUser(administrator, 200,  listAnswer1, 1,
                        new TestHint(userListApi, "", "Endpoint must respond with HTTP OK status (200)" +
                                " and body with array of objects representing the users sorted by ID in ascending order.")), // 6

                () -> testListUser(wronguserCred1, 401,  listAnswer1, 0,
                        new TestHint(userListApi, "", "A user with incorrect credentials is not allowed")), // 7

                () -> testListUser(wronguserCred2, 401,  listAnswer1, 0,
                        new TestHint(userListApi, "", "A user with incorrect credentials is not allowed")), // 8

                () -> testTransaction(johndoe1, transactionApi, "POST", 401,"1", "ALLOWED",
                        new TestHint(transactionApi, "", "Merchant after registration" +
                                " must be LOCKED")), // 9

                () -> testLock(lockApi, administrator, 200, "UNLOCK", "johndoe1",
                        new TestHint(lockApi, "", "A user johndoe1 must be UNLOCKED")), // 10

                () -> testTransaction(johndoe1, transactionApi, "POST", 200,"1", "ALLOWED",
                        new TestHint(transactionApi, "", "A user johndoe1 must be UNLOCKED")), // 11

                () -> testTransaction(johndoe1, transactionApi, "POST", 200,"1", "ALLOWED",
                        new TestHint(transactionApi, "amount = 1", "Result validating of Transaction" +
                                " must be 'ALLOWED'")), // 12

                // Testing persistence
                () -> restartApplication(), // 13

                () -> testListUser(administrator, 200,  listAnswer1, 1,
                        new TestHint(userListApi, "", "After restart user must exist")), // 14

                () -> testAddUser(johndoe1, 409, "MERCHANT",
                        new TestHint(userApi, johndoe1, "In case of an attempt to register an existing user," +
                                " endpoint must respond with HTTP CONFLICT status (409).")), // 15

                () -> testAddUser(johndoe2, 201, "MERCHANT",
                        new TestHint(userApi, johndoe2, "If user successfully added, endpoint" +
                                " must respond with HTTP CREATED status (201) ")), // 16

                () -> testListUser(administrator, 200,  listAnswer1, 2,
                        new TestHint(userListApi, "", "Endpoint must respond with HTTP OK status (200)" +
                                " and body with array of objects representing the users sorted by ID in ascending order.")), // 17

                () -> testTransaction(johndoe1, transactionApi, "POST", 200,"199", "ALLOWED",
                        new TestHint(transactionApi, "amount = 199", "Result validating of Transaction" +
                                " must be 'ALLOWED'")), // 18

                () -> testTransaction(johndoe1, transactionApi, "POST", 200,"200", "ALLOWED",
                        new TestHint(transactionApi, "amount = 200", "Result validating of Transaction" +
                                " must be 'ALLOWED'")), // 19

                () -> testTransaction(johndoe1, transactionApi, "POST", 200,"201", "MANUAL_PROCESSING",
                        new TestHint(transactionApi, "amount = 201", "Result validating of Transaction" +
                                " must be 'MANUAL_PROCESSING'")), // 20

                () -> testTransaction(johndoe1, transactionApi, "POST", 200,"1499", "MANUAL_PROCESSING",
                        new TestHint(transactionApi, "amount = 1499", "Result validating of Transaction" +
                                " must be 'MANUAL_PROCESSING'")), // 21

                () -> testTransaction(johndoe1, transactionApi, "POST", 200,"1500", "MANUAL_PROCESSING",
                        new TestHint(transactionApi, "amount = 1500", "Result validating of Transaction" +
                                " must be 'MANUAL_PROCESSING'")), // 22

                () -> testTransaction(johndoe1, transactionApi, "POST", 200,"1501", "PROHIBITED",
                        new TestHint(transactionApi, "amount = 1501", "Result validating of Transaction" +
                                " must be 'PROHIBITED'")), // 23

                () -> testTransaction(johndoe1, transactionApi, "POST", 200,"2000", "PROHIBITED",
                        new TestHint(transactionApi, "amount = 2000", "Result validating of Transaction" +
                                " must be 'PROHIBITED'")), // 24

                () -> testTransaction(johndoe1, transactionApi, "POST", 400,"-1", "Wrong request!",
                        new TestHint(transactionApi, "amount = -1", "Response status" +
                                " must be 'Bad request'")), // 25

                () -> testTransaction(johndoe1, transactionApi, "POST", 400,"0", "Wrong request!",
                        new TestHint(transactionApi, "amount = 0", "Response status" +
                                " must be 'Bad request'")), // 26

                () -> testTransaction(johndoe1, transactionApi, "POST", 400,null, "Wrong request!",
                        new TestHint(transactionApi, "amount = null", "Response status" +
                                " must be 'Bad request'")), // 27

                () -> testTransaction(johndoe1, transactionApi, "POST", 400,"", "Wrong request!",
                        new TestHint(transactionApi, "amount = \"\"", "Response status" +
                                " must be 'Bad request'")), // 28

                () -> testTransaction(johndoe1, transactionApi, "POST", 400," ", "Wrong request!",
                        new TestHint(transactionApi, "amount = \" \"", "Response status" +
                                " must be 'Bad request'")), // 29

                () -> testTransaction(johndoe1, transactionApi, "POST", 400,"empty", "Wrong request!",
                        new TestHint(transactionApi, "empty body", "Response status" +
                                " must be 'Bad request'")), // 30

                () -> testDeleteUser(administrator,404,"somebody",
                        new TestHint(userApi, userApi + "/" + "somebody", "If a user is not found," +
                                " respond with HTTP Not Found status (404).")), // 31

                () -> testDeleteUser(administrator,200,"johndoe1",
                        new TestHint(userApi, userApi + "/" + "johndoe1", "The endpoint must delete" +
                                " the user and respond with HTTP OK status (200)")), // 32

                () -> testListUser(administrator, 200,  listAnswer2, 1,
                        new TestHint(userListApi, "", "User 'johndoe1' must be delete")), // 33

                () -> testRole(roleApi, administrator,404,"MERCHANT", "johndoe22",
                        new TestHint(roleApi, "", "If a user is not found, endpoint" +
                                " must respond with the HTTP Not Found status (404).")), // 34

                () -> testRole(roleApi, administrator,400,"USER", "johndoe2",
                        new TestHint(roleApi, "", "If a role is not found, endpoint" +
                                " must respond with the HTTP Bad Request status (400).")), // 35

                () -> testRole(roleApi, administrator,400,"ADMINISTRATOR", "johndoe2",
                        new TestHint(roleApi, "", "If a role is ADMINISTRATOR, endpoint" +
                                " must respond with the HTTP Bad Request status (400).")), // 36

                () -> testRole(roleApi, administrator,200,"SUPPORT", "johndoe2",
                        new TestHint(roleApi, "", "If a role successfully changed," +
                                " respond with the HTTP OK status (200)")), // 37

                () -> testRole(roleApi, administrator,409,"SUPPORT", "johndoe2",
                        new TestHint(roleApi, "", "If a role already assigned to a user," +
                                " endpoint must respond with the HTTP Conflict status (409).")), // 38

                () -> testLock(lockApi, administrator, 200, "UNLOCK", "johndoe2",
                        new TestHint(lockApi, "", "A user johndoe2 must be UNLOCKED")), // 39

                () -> testListUser(johndoe2, 200,  listAnswer3, 1,
                        new TestHint(userListApi, "", "Role for user 'johndoe2" +
                                "' must be changed to SUPPORT")), // 40

                () -> testTransaction(johndoe2, transactionApi, "POST", 403,"1", "ALLOWED",
                        new TestHint(transactionApi, "", "Role MERCHANT must be removed from" +
                                " user johndoe2!")), // 41

                // test Locking
                () -> testAddUser(johndoe3, 201, "MERCHANT",
                        new TestHint(userApi, johndoe3, "If user successfully added, endpoint" +
                                " must respond with HTTP CREATED status (201) ")), // 42

                () -> testTransaction(johndoe3, transactionApi, "POST", 401,"1", "ALLOWED",
                        new TestHint(transactionApi, "", "MERCHANT user after registration" +
                                " must be LOCKED")), // 43

                () -> testLock(lockApi, administrator, 200, "UNLOCK", "johndoe3",
                        new TestHint(lockApi, "", "A user johndoe3 must be UNLOCKED")), // 44

                () -> testTransaction(johndoe3, transactionApi, "POST", 200,"1", "ALLOWED",
                        new TestHint(transactionApi, "", "A user johndoe3 must be UNLOCKED")), // 45

                () -> testLock(lockApi, administrator, 200, "LOCK", "johndoe3",
                        new TestHint(lockApi, "", "A user johndoe3 must be LOCKED")), // 46

                () -> testTransaction(johndoe3, transactionApi, "POST", 401,"1", "ALLOWED",
                        new TestHint(transactionApi, "", "A user johndoe3 must be LOCKED")), // 47

                () -> testLock(lockApi, administrator, 200, "UNLOCK", "johndoe3",
                        new TestHint(lockApi, "", "A user johndoe3 must be UNLOCKED")), // 48

                // test role model
                () -> testTransaction(administrator, transactionApi, "POST", 403,"1", "ALLOWED",
                        new TestHint(transactionApi, "", "A user with role ADMINISTRATOR" +
                                " must not have access to " + transactionApi)), // 49

                () -> testTransaction(administrator, transactionApi + "/", "POST", 403,"1", "ALLOWED",
                        new TestHint(transactionApi + "/", "", "A user with role ADMINISTRATOR" +
                                " must not have access to " + transactionApi + "/")), // 50

                () -> testTransaction(johndoe2, transactionApi, "POST", 403,"1", "ALLOWED",
                        new TestHint(transactionApi, "", "A user with role SUPPORT" +
                                " must not have access to " + transactionApi)), // 51

                () -> testTransaction(johndoe2, transactionApi + "/", "POST", 403,"1", "ALLOWED",
                        new TestHint(transactionApi + "/", "", "A user with role SUPPORT" +
                                " must not have access to " + transactionApi + "/")), // 52

                () -> testTransaction(null, transactionApi, "POST", 401,"1", "ALLOWED",
                        new TestHint(transactionApi, "", "A user with role ANONYMOUS" +
                                " must not have access to " + transactionApi)), // 53

                () -> testDeleteUser(null,401,"johndoe1",
                        new TestHint(userApi, "", "A user with role ANONYMOUS" +
                                " must not have access to DELETE " + userApi)), // 54

                () -> testDeleteUser(johndoe2,403,"johndoe1",
                        new TestHint(userApi, "", "A user with role SUPPORT" +
                                " must not have access to DELETE " + userApi)), // 55

                () -> testDeleteUser(johndoe3,403,"johndoe1",
                        new TestHint(userApi, "", "A user with role MERCHANT" +
                                " must not have access to DELETE " + userApi)), // 56

                () -> testDeleteUser(johndoe3,403,"",
                        new TestHint(userApi, "", "A user with role MERCHANT" +
                                " must not have access to DELETE " + userApi)), // 57

                () -> testListUser(null, 401,  listAnswer3, 1,
                        new TestHint(userListApi, "", "A user with role ANONYMOUS" +
                                " must not have access to " + userListApi)), // 58

                () -> testListUser(johndoe3, 403,  listAnswer3, 1,
                        new TestHint(userListApi, "", "A user with role MERCHANT" +
                                " must not have access to " + userListApi)), // 59

                () -> testLock(lockApi, johndoe3, 403, "UNLOCK", "johndoe2",
                        new TestHint(lockApi, "", "A user with role MERCHANT" +
                                " must not have access to "  + lockApi)), // 60

                () -> testLock(lockApi, johndoe2, 403, "UNLOCK", "johndoe2",
                        new TestHint(lockApi, "", "A user with role SUPPORT" +
                                " must not have access to "  + lockApi)), // 61

                () -> testLock(lockApi + "/", johndoe3, 403, "UNLOCK", "johndoe2",
                        new TestHint(lockApi + "/", "", "A user with role MERCHANT" +
                                " must not have access to " + lockApi + "/")), // 62

                () -> testLock(lockApi + "/", johndoe2, 403, "UNLOCK", "johndoe2",
                        new TestHint(lockApi + "/", "", "A user with role SUPPORT" +
                                " must not have access to " + lockApi + "/")), // 63

                () -> testLock(lockApi, null, 401, "UNLOCK", "johndoe2",
                        new TestHint(lockApi, "", "A user with role ANONYMOUS" +
                                " must not have access to " + lockApi)), // 64

                () -> testRole(roleApi, johndoe2,403,"SUPPORT", "johndoe2",
                        new TestHint(roleApi, "", "A user with role SUPPORT" +
                                " must not have access to " + roleApi)), // 65

                () -> testRole(roleApi, johndoe3,403,"SUPPORT", "johndoe2",
                        new TestHint(roleApi, "", "A user with role MERCHANT" +
                                " must not have access to " + roleApi)), // 66

                () -> testRole(roleApi, null,401,"SUPPORT", "johndoe2",
                        new TestHint(roleApi, "", "A user with role ANONYMOUS" +
                                " must not have access to " + roleApi)), // 67

                () -> testRole(roleApi + "/", johndoe2,403,"SUPPORT", "johndoe2",
                        new TestHint(roleApi + "/", "", "A user with role SUPPORT" +
                                " must not have access to " + roleApi + "/")), // 68

                () -> testRole(roleApi + "/", johndoe3,403,"SUPPORT", "johndoe2",
                        new TestHint(roleApi + "/", "", "A user with role MERCHANT" +
                                " must not have access to " + roleApi + "/")), // 69

        };
    }
  learner_created: false
- name: src/antifraud/business/exceptions/UsernameTakenException.java
  visible: true
  text: |
    package antifraud.business.exceptions;

    public class UsernameTakenException extends RuntimeException {
        public UsernameTakenException(String message) {
            super(message);
        }
    }
  learner_created: true
- name: src/antifraud/business/model/User.java
  visible: true
  text: |
    package antifraud.business.model;

    import antifraud.business.enums.RolesEnum;

    import javax.persistence.*;
    import java.util.ArrayList;
    import java.util.List;

    @Entity
    @Table(name = "USERS")
    public class User {
        @Id
        @Column
        @GeneratedValue(strategy = GenerationType.AUTO)
        private long id;

        @Column
        private String name;

        @Column(unique = true)
        private String username;

        @Column
        private String password;

        @ManyToMany(cascade = {
                CascadeType.MERGE,
                CascadeType.PERSIST
        }, fetch = FetchType.EAGER)
        @JoinTable(name = "USER_ROLES")
        private List<Role> rolesAndAuthorities; // should be prefixed with ROLE_

        public User() {
        }

        public User(String name, String username, String password) {
            this.username = username.toLowerCase();
            this.name = name;
            this.password = password;
            this.rolesAndAuthorities = new ArrayList<>();
            rolesAndAuthorities.add(new Role(RolesEnum.ROLE_USER, RolesEnum.getRoleUserDescription()));
        }

        public long getId() {
            return id;
        }

        public void setId(long id) {
            this.id = id;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public String getUsername() {
            return username;
        }

        public void setUsername(String username) {
            this.username = username;
        }

        public String getPassword() {
            return password;
        }

        public void setPassword(String password) {
            this.password = password;
        }

        public List<Role> getRolesAndAuthorities() {
            return rolesAndAuthorities;
        }

        public void setRolesAndAuthorities(List<Role> rolesAndAuthorities) {
            this.rolesAndAuthorities = rolesAndAuthorities;
        }
    }
  learner_created: true
- name: src/antifraud/business/enums/TransactionStatus.java
  visible: true
  text: |
    package antifraud.business.enums;

    public enum TransactionStatus {
        ALLOWED, MANUAL_PROCESSING, PROHIBITED
    }
  learner_created: true
- name: src/antifraud/presentation/DTO/error/ErrorResponse.java
  visible: true
  text: |
    package antifraud.presentation.DTO.error;

    import java.time.LocalDateTime;

    public record ErrorResponse(LocalDateTime dateTime, int errorCode, String message) {}
  learner_created: true
- name: src/antifraud/business/model/Role.java
  visible: true
  text: |
    package antifraud.business.model;

    import antifraud.business.enums.RolesEnum;
    import org.springframework.security.core.GrantedAuthority;

    import javax.persistence.*;

    @Entity(name = "roles")
    public class Role implements GrantedAuthority {
        @Id
        @Column
        @GeneratedValue(strategy = GenerationType.AUTO)
        private int id;

        @Column
        private String name;

        @Column
        private String description;

        public Role(RolesEnum rolesEnum, String description) {
            this.name = rolesEnum.toString();
            this.description = description;
        }

        public Role() {
        }

        public int getId() {
            return id;
        }

        public void setId(int id) {
            this.id = id;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public String getDescription() {
            return description;
        }

        public void setDescription(String description) {
            this.description = description;
        }

        @Override
        public String getAuthority() {
            return name;
        }
    }
  learner_created: true
- name: src/antifraud/business/services/UserService.java
  visible: true
  text: |
    package antifraud.business.services;

    import antifraud.business.exceptions.UserNotFoundException;
    import antifraud.business.exceptions.UsernameTakenException;
    import antifraud.business.model.Role;
    import antifraud.business.model.User;
    import antifraud.business.security.UserDetailsImpl;
    import antifraud.persistence.RoleRepository;
    import antifraud.persistence.UserRepository;
    import antifraud.presentation.DTO.user.RegisterRequest;
    import antifraud.presentation.DTO.user.UserResponse;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.security.core.userdetails.UserDetails;
    import org.springframework.security.core.userdetails.UserDetailsService;
    import org.springframework.security.core.userdetails.UsernameNotFoundException;
    import org.springframework.security.crypto.password.PasswordEncoder;
    import org.springframework.stereotype.Service;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.Optional;

    @Service
    public class UserService implements UserDetailsService {
        private final UserRepository userRepository;
        private final RoleRepository roleRepository;
        private final PasswordEncoder bcryptEncoder;

        @Autowired
        public UserService(UserRepository userRepository, PasswordEncoder encoder,
                           RoleRepository roleRepository) {
            this.userRepository = userRepository;
            this.roleRepository = roleRepository;
            this.bcryptEncoder = encoder;
        }

        public User registerNewUser(RegisterRequest userRequest) throws UsernameTakenException {
            boolean isUsernameAvailable = checkUsernameAvailability(userRequest.username().toLowerCase());
            if (!isUsernameAvailable) {
                throw new UsernameTakenException(userRequest.username() + " is already registered!");
            }
            User user = new User(userRequest.name(), userRequest.username(), bcryptEncoder.encode(userRequest.password()));
            preventRolesDuplicates(user.getRolesAndAuthorities());
            userRepository.save(user);
            return user;
        }

        public List<UserResponse> getAllUsers() {
            Iterable<User> userIterable = userRepository.findAll();
            List<UserResponse> userResponseList = new ArrayList<>();
            for (User user : userIterable) {
                    userResponseList.add(new UserResponse(user.getId(), user.getName(), user.getUsername()));
            }
            return userResponseList;
        }

        public User deleteUserByUsername(String username) {
            Optional<User> user = userRepository.findByUsername(username);

            if (user.isEmpty()) {
                throw new UserNotFoundException("Can't find the user to be deleted.");
            }

            User userToDelete = user.get();

            userRepository.delete(userToDelete);
            return userToDelete;
        }

        private void preventRolesDuplicates(List<Role> rolesAndAuthorities) {
            for (int i = 0; i < rolesAndAuthorities.size(); i++) {
                Role current = rolesAndAuthorities.get(i);
                Role role = roleRepository.findByName(current.getName());
                if (role != null) {
                    rolesAndAuthorities.set(i, role);
                }
            }
        }

        private boolean checkUsernameAvailability(String username) {
            Optional<User> user = userRepository.findByUsername(username);

            return user.isEmpty();
        }

        @Override
        public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
            Optional<User> user = userRepository.findByUsername(username.toLowerCase());

            if (user.isEmpty()) {
                throw new UsernameNotFoundException("Username not found: " + username);
            }

            return new UserDetailsImpl(user.get());
        }
    }
  learner_created: true
- name: src/antifraud/business/security/EncoderConfig.java
  visible: true
  text: |
    package antifraud.business.security;

    import org.springframework.context.annotation.Bean;
    import org.springframework.context.annotation.Configuration;
    import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;

    @Configuration
    public class EncoderConfig {
        @Bean
        public BCryptPasswordEncoder getEncoder() {
            return new BCryptPasswordEncoder();
        }
    }
  learner_created: true
- name: src/antifraud/business/security/SecurityConfig.java
  visible: true
  text: |
    package antifraud.business.security;

    import antifraud.business.services.UserService;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.context.annotation.Bean;
    import org.springframework.context.annotation.Configuration;
    import org.springframework.http.HttpMethod;
    import org.springframework.security.authentication.AuthenticationManager;
    import org.springframework.security.authentication.AuthenticationProvider;
    import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
    import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
    import org.springframework.security.config.annotation.web.builders.HttpSecurity;
    import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
    import org.springframework.security.config.http.SessionCreationPolicy;
    import org.springframework.security.core.AuthenticationException;
    import org.springframework.security.crypto.password.PasswordEncoder;
    import org.springframework.security.web.AuthenticationEntryPoint;
    import org.springframework.security.web.SecurityFilterChain;
    import org.springframework.stereotype.Component;

    import javax.servlet.ServletException;
    import javax.servlet.http.HttpServletRequest;
    import javax.servlet.http.HttpServletResponse;
    import java.io.IOException;

    @Configuration
    @EnableWebSecurity
    public class SecurityConfig {

        private final UserService userService;
        private final PasswordEncoder bcryptEncoder;
        private final RestAuthenticateEntryPoint restAuthenticateEntryPoint;

        @Autowired
        public SecurityConfig(UserService userService, PasswordEncoder bcryptEncoder,
                              RestAuthenticateEntryPoint restAuthenticateEntryPoint) {
            this.userService = userService;
            this.bcryptEncoder = bcryptEncoder;
            this.restAuthenticateEntryPoint = restAuthenticateEntryPoint;
        }

        @Bean
        public SecurityFilterChain filterChain(HttpSecurity httpSecurity, @Autowired AuthenticationManager authenticationManager) throws Exception {
            httpSecurity.httpBasic().authenticationEntryPoint(restAuthenticateEntryPoint)
                    .and()
                    .csrf().disable().headers().frameOptions().disable()
                    .and()
                    .authorizeRequests()
                    .antMatchers(HttpMethod.POST, "/api/auth/user").permitAll()
                    .antMatchers("/actuator/shutdown").permitAll()
                    .antMatchers("/h2-console/**").permitAll()
                    .anyRequest().authenticated()
                    .and()
                    .authenticationManager(authenticationManager)
                    .sessionManagement()
                    .sessionCreationPolicy(SessionCreationPolicy.STATELESS); // no se

            return httpSecurity.build();
        }

        @Bean
        public AuthenticationProvider authenticationProvider() {
            DaoAuthenticationProvider authenticationProvider = new DaoAuthenticationProvider();
            authenticationProvider.setUserDetailsService(userService);
            authenticationProvider.setPasswordEncoder(bcryptEncoder);
            return authenticationProvider;
        }

        @Bean
        public AuthenticationManager authenticationManager(HttpSecurity http) throws Exception {
            AuthenticationManagerBuilder authenticationManagerBuilder = http.getSharedObject(AuthenticationManagerBuilder.class);
            authenticationManagerBuilder.authenticationProvider(authenticationProvider());
            return authenticationManagerBuilder.build();
        }

        @Component
        static class RestAuthenticateEntryPoint implements AuthenticationEntryPoint {
            @Override
            public void commence(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException) throws IOException, ServletException {
                response.sendError(HttpServletResponse.SC_UNAUTHORIZED, authException.getMessage());
            }
        }



    }
  learner_created: true
- name: src/antifraud/presentation/controller/exceptionhandler/GlobalExceptionHandler.java
  visible: true
  text: |
    package antifraud.presentation.controller.exceptionhandler;

    import antifraud.presentation.DTO.error.ErrorResponse;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.validation.FieldError;
    import org.springframework.web.bind.MethodArgumentNotValidException;
    import org.springframework.web.bind.annotation.ControllerAdvice;
    import org.springframework.web.bind.annotation.ExceptionHandler;

    import java.util.ArrayList;
    import java.util.List;

    @ControllerAdvice
    public class GlobalExceptionHandler {

        @ExceptionHandler(MethodArgumentNotValidException.class)
        public ResponseEntity<ValidationError> handleInvalidArgumentException(MethodArgumentNotValidException ex) {
            List<FieldError> fieldErrors = ex.getBindingResult().getFieldErrors();
            ValidationError validationError = processFieldErrors(fieldErrors);
            return new ResponseEntity<>(validationError, HttpStatus.BAD_REQUEST);
        }

        private ValidationError processFieldErrors(List<FieldError> fieldErrors) {
            ValidationError validationError = new ValidationError(HttpStatus.BAD_REQUEST.value(), "Field Validation Error");
            for (FieldError fieldError : fieldErrors) {
                validationError.addFieldError(fieldError.getObjectName(), fieldError.getField(), fieldError.getField() + " " + fieldError.getDefaultMessage());
            }
            return validationError;
        }


        static class ValidationError {
            private final int status;
            private final String message;
            private List<FieldError> fieldErrors = new ArrayList<>();

            ValidationError(int status, String message) {
                this.status = status;
                this.message = message;
            }

            public int getStatus() {
                return status;
            }

            public String getMessage() {
                return message;
            }

            public void addFieldError(String path, String field, String message) {
                FieldError error = new FieldError(path, field, message);
                fieldErrors.add(error);
            }

            public List<FieldError> getFieldErrors() {
                return fieldErrors;
            }
        }
    }
  learner_created: true
- name: src/antifraud/business/exceptions/UserNotFoundException.java
  visible: true
  text: |
    package antifraud.business.exceptions;

    public class UserNotFoundException extends RuntimeException {

        public UserNotFoundException(String message) {
            super(message);
        }
    }
  learner_created: true
- name: src/antifraud/presentation/controller/UserController.java
  visible: true
  text: |
    package antifraud.presentation.controller;

    import antifraud.business.exceptions.UserNotFoundException;
    import antifraud.business.exceptions.UsernameTakenException;
    import antifraud.business.model.User;
    import antifraud.business.services.UserService;
    import antifraud.presentation.DTO.user.DeleteResponse;
    import antifraud.presentation.DTO.user.RegisterRequest;
    import antifraud.presentation.DTO.user.UserResponse;
    import antifraud.presentation.DTO.error.ErrorResponse;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.*;

    import javax.validation.Valid;
    import java.time.LocalDateTime;
    import java.util.List;

    @RestController
    public class UserController {
        @Autowired
        private UserService userService;

        @PostMapping("/api/auth/user")
        public ResponseEntity<UserResponse> register(@RequestBody @Valid RegisterRequest userRequest) {
            User user = userService.registerNewUser(userRequest);
            UserResponse registerResponse = new UserResponse(user.getId(), user.getName(), user.getUsername());
            return new ResponseEntity<>(registerResponse, HttpStatus.CREATED);
        }

        @GetMapping("/api/auth/list")
        public ResponseEntity<List<UserResponse>> getAllUsers() {
            List<UserResponse> userList = userService.getAllUsers();
            return new ResponseEntity<>(userList, HttpStatus.OK);
        }

        @DeleteMapping("/api/auth/user/{username}")
        public ResponseEntity<DeleteResponse> deleteUserByUsername(@PathVariable String username) {
            User deletedUser = userService.deleteUserByUsername(username);
            return new ResponseEntity<>(new DeleteResponse(deletedUser.getUsername(), "Deleted successfully!"), HttpStatus.OK);
        }

        @ExceptionHandler(UsernameTakenException.class)
        public ResponseEntity<ErrorResponse> handleUsernameNotAvailable(UsernameTakenException ex) {
            ErrorResponse errorResponse = new ErrorResponse(LocalDateTime.now(), HttpStatus.CONFLICT.value(), ex.getMessage());
            return new ResponseEntity<>(errorResponse, HttpStatus.CONFLICT);
        }

        @ExceptionHandler(UserNotFoundException.class)
        public ResponseEntity<ErrorResponse> handleUserNotFound(UserNotFoundException ex) {
            ErrorResponse errorResponse = new ErrorResponse(LocalDateTime.now(), HttpStatus.NOT_FOUND.value(), ex.getMessage());
            return new ResponseEntity<>(errorResponse, HttpStatus.NOT_FOUND);
        }


    }
  learner_created: true
- name: src/antifraud/persistence/RoleRepository.java
  visible: true
  text: |
    package antifraud.persistence;

    import antifraud.business.model.Role;
    import org.springframework.data.repository.CrudRepository;

    public interface RoleRepository extends CrudRepository<Role, Integer> {
        Role findByName(String name);
    }
  learner_created: true
- name: src/antifraud/persistence/UserRepository.java
  visible: true
  text: |
    package antifraud.persistence;

    import antifraud.business.model.User;
    import org.springframework.data.repository.CrudRepository;
    import org.springframework.stereotype.Repository;

    import java.util.Optional;
    import java.util.UUID;

    @Repository
    public interface UserRepository extends CrudRepository<User, UUID> {
        Iterable<User> findAll();

        Optional<User> findByUsername(String username);
    }
  learner_created: true
- name: src/antifraud/business/Transaction.java
  visible: true
  text: |
    package antifraud.business;

    import javax.persistence.Column;
    import javax.persistence.Entity;
    import javax.persistence.Id;

    @Entity
    public class Transaction {
        @Id
        @Column
        private long id;

        @Column
        private long amount;

        public long getAmount() {
            return amount;
        }

        public Transaction() {
        }
    }
  learner_created: true
- name: src/antifraud/presentation/controller/TransactionController.java
  visible: true
  text: |
    package antifraud.presentation.controller;

    import antifraud.business.Transaction;
    import antifraud.business.services.TransactionService;
    import antifraud.business.enums.TransactionStatus;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.*;

    import java.util.Map;

    @RestController
    public class TransactionController {
        @Autowired
        private TransactionService transactionService;

        @PostMapping("/api/antifraud/transaction")
        public Map<String, TransactionStatus> checkFraud(@RequestBody Transaction transaction) {
            if (transaction == null) {
                throw new IllegalArgumentException("Body not provided!");
            }

            TransactionStatus status = transactionService.checkFraud(transaction);
            return Map.of("result", status);
        }



        @GetMapping("/test")
        public String test() {
            return "/test is accessed";
        }

        @ExceptionHandler(IllegalArgumentException.class)
        public ResponseEntity<Map<String, String>> handleIllegalArgumentException(IllegalArgumentException exception) {
            Map<String, String> errorMap = Map.of("error", exception.getMessage());
            return new ResponseEntity<>(errorMap, HttpStatus.BAD_REQUEST);
        }

    }
  learner_created: true
- name: src/antifraud/business/security/UserDetailsImpl.java
  visible: true
  text: |
    package antifraud.business.security;

    import antifraud.business.model.User;
    import org.springframework.security.core.GrantedAuthority;
    import org.springframework.security.core.userdetails.UserDetails;

    import java.util.Collection;

    public class UserDetailsImpl implements UserDetails {
        private final String username;
        private final String password;
        private final Collection<? extends GrantedAuthority> rolesAndAuthorities;

        public UserDetailsImpl(User user) {
            username = user.getUsername();
            password = user.getPassword();
            rolesAndAuthorities = user.getRolesAndAuthorities();
        }

        @Override
        public Collection<? extends GrantedAuthority> getAuthorities() {
            return rolesAndAuthorities;
        }

        @Override
        public String getPassword() {
            return password;
        }

        @Override
        public String getUsername() {
            return username;
        }

        @Override
        public boolean isAccountNonExpired() {
            return true;
        }

        @Override
        public boolean isAccountNonLocked() {
            return true;
        }

        @Override
        public boolean isCredentialsNonExpired() {
            return true;
        }

        @Override
        public boolean isEnabled() {
            return true;
        }
    }
  learner_created: true
- name: src/antifraud/business/services/TransactionService.java
  visible: true
  text: |+
    package antifraud.business.services;

    import antifraud.business.Transaction;
    import antifraud.business.enums.TransactionStatus;
    import org.springframework.stereotype.Service;

    @Service
    public class TransactionService {

        public TransactionStatus checkFraud(Transaction transaction) {
            if (transaction.getAmount() <= 0) {
                throw new IllegalArgumentException("Transaction Amount is lower than 0!");
            }
            if (transaction.getAmount() > 1500) {
                return TransactionStatus.PROHIBITED;
            }
            if (transaction.getAmount() <= 1500
                    && transaction.getAmount() > 200) {
                return TransactionStatus.MANUAL_PROCESSING;
            } else {
                return TransactionStatus.ALLOWED;
            }

        }

    }

  learner_created: true
- name: src/antifraud/business/enums/RoleEnum.java
  visible: true
  text: |
    package antifraud.business.enums;

    public enum RolesEnum {
        ROLE_ADMIN, ROLE_USER;

        public static String getRoleUserDescription() {
            return "Basic User Role";
        }
    }
  learner_created: true
- name: src/antifraud/presentation/DTO/user/create/RegisterRequest.java
  visible: true
  text: |
    package antifraud.presentation.DTO.user;

    import javax.validation.constraints.NotBlank;

    public record RegisterRequest(@NotBlank String name, @NotBlank String username,
                                  @NotBlank String password) {
    }
  learner_created: true
- name: src/antifraud/presentation/DTO/user/delete/DeleteResponse.java
  visible: true
  text: |
    package antifraud.presentation.DTO.user;

    public record DeleteResponse(String username, String status) {
    }
  learner_created: true
- name: src/antifraud/presentation/DTO/user/read/UserResponse.java
  visible: true
  text: |
    package antifraud.presentation.DTO.user;

    public record UserResponse(long id, String name, String username) {
    }
  learner_created: true
- name: src/antifraud/business/exceptions/InvalidRoleException.java
  visible: true
  learner_created: true
- name: src/antifraud/business/exceptions/RoleConflictException.java
  visible: true
  learner_created: true
- name: src/antifraud/presentation/DTO/user/update/UpdateStatusRequest.java
  visible: true
  learner_created: true
- name: src/antifraud/presentation/DTO/user/update/UpdateRoleRequest.java
  visible: true
  learner_created: true
- name: src/antifraud/presentation/DTO/user/update/UpdateStatusResponse.java
  visible: true
  learner_created: true
- name: src/antifraud/business/enums/StatusOperation.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/18069#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Thu, 20 Apr 2023 02:50:37 UTC"
record: 3
