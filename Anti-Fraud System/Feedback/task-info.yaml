type: edu
files:
- name: src/antifraud/AntiFraudApplication.java
  visible: true
  text: |-
    package antifraud;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class AntiFraudApplication {
        public static void main(String[] args) {
            SpringApplication.run(AntiFraudApplication.class, args);
        }
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    server.error.include-message=always
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
    spring.jackson.serialization.INDENT_OUTPUT=true
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    plugins {
        id 'java'
        id 'org.springframework.boot' version '2.3.1.RELEASE'
        id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    }


    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'com.h2database:h2'
        implementation group: 'org.hibernate', name: 'hibernate-validator', version: '6.1.0.Final'
    }
  learner_created: false
- name: test/AntiFraudTest.java
  visible: false
  text: |-
    import antifraud.AntiFraudApplication;
    import com.google.gson.JsonArray;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.UnexpectedError;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.request.HttpRequest;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.ArrayList;
    import java.util.List;

    import static org.hyperskill.hstest.common.JsonUtils.getJson;
    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    class TestHint {
        private final String apiPath;
        private final String requestBody;
        private final String message;

        public TestHint(String apiPath, String requestBody, String message) {
            this.apiPath = apiPath;
            this.requestBody = requestBody;
            this.message = message;
        }

        @Override
        public String toString() {
            return "Test case\n" +
                    "Testing api: '" + apiPath + '\'' + "\n" +
                    (requestBody.length() > 0 ? "request: '" + requestBody + '\'' + "\n" : "") +
                    "Expectations: '" + message + "'" + "\n" +
                    "-----";
        }
    }

    public class AntiFraudTest extends SpringTest {

        private final String transactionApi = "/api/antifraud/transaction";
        private final String userApi = "/api/auth/user";
        private final String userListApi = "/api/auth/list";
        private final String lockApi = "/api/auth/access";
        private final String roleApi = "/api/auth/role";
        private final String ipApi = "/api/antifraud/suspicious-ip";
        private final String cardApi = "/api/antifraud/stolencard";
        private final String historyApi = "/api/antifraud/history";

        List<Integer> userIdList = new ArrayList<>();

        private final String administrator = "{\n" +
                "   \"name\": \"administrator\",\n" +
                "   \"username\": \"administrator\",\n" +
                "   \"password\": \"oMoa4VvqnLxW\"\n" +
                "}";

        private final String johndoe1 = "{\n" +
                "   \"name\": \"John Doe 1\",\n" +
                "   \"username\": \"johndoe1\",\n" +
                "   \"password\": \"oMoa3VvqnLxW\"\n" +
                "}";

        private final String johndoe2 = "{\n" +
                "   \"name\": \"John Doe 2\",\n" +
                "   \"username\": \"johndoe2\",\n" +
                "   \"password\": \"oMoa5VvqnLxW\"\n" +
                "}";

        private final String johndoe3 = "{\n" +
                "   \"name\": \"John Doe 3\",\n" +
                "   \"username\": \"johndoe3\",\n" +
                "   \"password\": \"oMoa6VvqnLxW\"\n" +
                "}";

        private final String wronguser1 = "{\n" +
                "   \"name\": \"John Doe 1\",\n" +
                "   \"password\": \"oa3VvqnLxW\"\n" +
                "}";

        private final String wronguser2 = "{\n" +
                "   \"name\": \"John Doe 2\",\n" +
                "   \"username\": \"johndoe1\"\n" +
                "}";

        private final String wronguserCred1 = "{\n" +
                "   \"name\": \"John Doe 1\",\n" +
                "   \"username\": \"johndoe1\",\n" +
                "   \"password\": \"oa3VvqnLxW\"\n" +
                "}";

        private final String wronguserCred2 = "{\n" +
                "   \"name\": \"John Do\",\n" +
                "   \"username\": \"johndo\",\n" +
                "   \"password\": \"oMoa3VvqnLxW\"\n" +
                "}";

        private final String listAnswer1 = "[ {\n" +
                "  \"id\" : 1,\n" +
                "  \"name\" : \"administrator\",\n" +
                "  \"username\" : \"administrator\",\n" +
                "  \"role\" : \"ADMINISTRATOR\"\n" +
                "}, {\n" +
                "  \"id\" : 2,\n" +
                "  \"name\" : \"John Doe 1\",\n" +
                "  \"username\" : \"johndoe1\",\n" +
                "  \"role\" : \"MERCHANT\"\n" +
                "}, {\n" +
                "  \"id\" : 4,\n" +
                "  \"name\" : \"John Doe 2\",\n" +
                "  \"username\" : \"johndoe2\",\n" +
                "  \"role\" : \"MERCHANT\"\n" +
                "} ]";

        private final String listAnswer2 = "[ {\n" +
                "  \"id\" : 1,\n" +
                "  \"name\" : \"administrator\",\n" +
                "  \"username\" : \"administrator\",\n" +
                "  \"role\" : \"ADMINISTRATOR\"\n" +
                "}, {\n" +
                "  \"id\" : 4,\n" +
                "  \"name\" : \"John Doe 2\",\n" +
                "  \"username\" : \"johndoe2\",\n" +
                "  \"role\" : \"MERCHANT\"\n" +
                "} ]";

        private final String listAnswer3 = "[ {\n" +
                "  \"id\" : 1,\n" +
                "  \"name\" : \"administrator\",\n" +
                "  \"username\" : \"administrator\",\n" +
                "  \"role\" : \"ADMINISTRATOR\"\n" +
                "}, {\n" +
                "  \"id\" : 4,\n" +
                "  \"name\" : \"John Doe 2\",\n" +
                "  \"username\" : \"johndoe2\",\n" +
                "  \"role\" : \"SUPPORT\"\n" +
                "} ]";

        private final String tr1 = "{\n" +
                "  \"amount\": 1,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:00:00\"\n" +
                "}";

        private final String tr2 = "{\n" +
                "  \"amount\": 199,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:01:00\"\n" +
                "}";

        private final String tr3 = "{\n" +
                "  \"amount\": 200,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:02:00\"\n" +
                "}";

        private final String tr4 = "{\n" +
                "  \"amount\": 201,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:03:00\"\n" +
                "}";

        private final String tr5 = "{\n" +
                "  \"amount\": 1499,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:04:00\"\n" +
                "}";

        private final String tr6 = "{\n" +
                "  \"amount\": 1500,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:05:00\"\n" +
                "}";

        private final String tr7 = "{\n" +
                "  \"amount\": 1501,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:06:00\"\n" +
                "}";

        private final String tr8 = "{\n" +
                "  \"amount\": 2000,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:07:00\"\n" +
                "}";

        private final String tr9 = "{\n" +
                "  \"amount\": 210,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-23T16:03:00\"\n" +
                "}";

        private final String tr10 = "{\n" +
                "  \"amount\": 202,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-23T16:04:00\"\n" +
                "}";

        private final String tr11 = "{\n" +
                "  \"amount\": 203,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-23T19:04:00\"\n" +
                "}";

        private final String tr12 = "{\n" +
                "  \"amount\": 1161,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-23T19:04:00\"\n" +
                "}";

        private final String tr13 = "{\n" +
                "  \"amount\": 163,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-23T19:08:00\"\n" +
                "}";

        private final String tr14 = "{\n" +
                "  \"amount\": 131,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-23T19:18:00\"\n" +
                "}";

        private final String tr15 = "{\n" +
                "  \"amount\": 929,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-23T19:28:00\"\n" +
                "}";

        private final String tr16 = "{\n" +
                "  \"amount\": 289,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-23T20:28:00\"\n" +
                "}";

        private final String tr17 = "{\n" +
                "  \"amount\": 930,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-23T20:28:00\"\n" +
                "}";

        private final String tr18 = "{\n" +
                "  \"amount\": 931,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-23T20:28:00\"\n" +
                "}";

        private final String trW1 = "{\n" +
                "  \"amount\": -1,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:00:00\"\n" +
                "}";

        private final String trW2 = "{\n" +
                "  \"amount\": 0,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:00:00\"\n" +
                "}";

        private final String trW3 = "{\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:00:00\"\n" +
                "}";

        private final String trW4 = "{\n" +
                "  \"amount\": \" \",\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:00:00\"\n" +
                "}";

        private final String trW5 = "{\n" +
                "  \"amount\": \"\",\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:00:00\"\n" +
                "}";

        private final String trW6 = "{ }";

        private final String trP1 = "{\n" +
                "  \"amount\": 1000,\n" +
                "  \"ip\": \"192.168.1.67\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:00:00\"\n" +
                "}";

        private final String trP2 = "{\n" +
                "  \"amount\": 1000,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000003305160034\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:00:00\"\n" +
                "}";

        private final String trP3 = "{\n" +
                "  \"amount\": 1000,\n" +
                "  \"ip\": \"192.168.1.67\",\n" +
                "  \"number\": \"4000003305160034\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:00:00\"\n" +
                "}";

        private final String trP4 = "{\n" +
                "  \"amount\": 2000,\n" +
                "  \"ip\": \"192.168.1.67\",\n" +
                "  \"number\": \"4000003305160034\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:00:00\"\n" +
                "}";

        // correlation rules
        private final String corr1IP = "{\n" +
                "  \"amount\": 1,\n" +
                "  \"ip\": \"192.168.1.2\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T17:10:00\"\n" +
                "}";

        private final String corr2IP = "{\n" +
                "  \"amount\": 1,\n" +
                "  \"ip\": \"192.168.1.3\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T17:11:00\"\n" +
                "}";

        private final String corr22IP = "{\n" +
                "  \"amount\": 1,\n" +
                "  \"ip\": \"192.168.1.3\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T17:12:00\"\n" +
                "}";

        private final String corr3IP = "{\n" +
                "  \"amount\": 1,\n" +
                "  \"ip\": \"192.168.1.4\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T17:12:00\"\n" +
                "}";

        private final String corr4IP = "{\n" +
                "  \"amount\": 1,\n" +
                "  \"ip\": \"192.168.1.5\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T17:13:00\"\n" +
                "}";

        private final String corr5IP = "{\n" +
                "  \"amount\": 2000,\n" +
                "  \"ip\": \"192.168.1.5\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T17:14:00\"\n" +
                "}";

        private final String corr1Reg = "{\n" +
                "  \"amount\": 1,\n" +
                "  \"ip\": \"192.168.1.2\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-21T17:10:00\"\n" +
                "}";

        private final String corr2Reg = "{\n" +
                "  \"amount\": 1,\n" +
                "  \"ip\": \"192.168.1.2\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"ECA\",\n" +
                "  \"date\": \"2022-01-21T17:11:00\"\n" +
                "}";

        private final String corr22Reg = "{\n" +
                "  \"amount\": 1,\n" +
                "  \"ip\": \"192.168.1.2\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"ECA\",\n" +
                "  \"date\": \"2022-01-21T17:12:00\"\n" +
                "}";

        private final String corr3Reg = "{\n" +
                "  \"amount\": 1,\n" +
                "  \"ip\": \"192.168.1.2\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"HIC\",\n" +
                "  \"date\": \"2022-01-21T17:13:00\"\n" +
                "}";

        private final String corr4Reg = "{\n" +
                "  \"amount\": 1,\n" +
                "  \"ip\": \"192.168.1.2\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"SSA\",\n" +
                "  \"date\": \"2022-01-21T17:14:00\"\n" +
                "}";

        private final String corr5Reg = "{\n" +
                "  \"amount\": 2000,\n" +
                "  \"ip\": \"192.168.1.2\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"SA\",\n" +
                "  \"date\": \"2022-01-21T17:15:00\"\n" +
                "}";





        private final String ipAnswer = "[ {\n" +
                "  \"id\" : 1,\n" +
                "  \"ip\" : \"192.168.1.66\"\n" +
                "}, {\n" +
                "  \"id\" : 2,\n" +
                "  \"ip\" : \"192.168.1.67\"\n" +
                "} ]";

        private final String ipAnswer2 = "[ {\n" +
                "  \"id\" : 2,\n" +
                "  \"ip\" : \"192.168.1.67\"\n" +
                "} ]";

        private final String ipAnswerEmpty = "[]";

        private final String cardAnswerEmpty = "[]";

        private final String cardAnswer = "[ {\n" +
                "  \"id\" : 1,\n" +
                "  \"number\" : \"4000003305061034\"\n" +
                "}, {\n" +
                "  \"id\" : 2,\n" +
                "  \"number\" : \"4000003305160034\"\n" +
                "} ]";

        private final String cardAnswer2 = "[ {\n" +
                "  \"id\" : 2,\n" +
                "  \"number\" : \"4000003305160034\"\n" +
                "} ]";

        private final String historyAnswer = "[ {\n" +
                "  \"transactionId\" : 1,\n" +
                "  \"amount\" : 1,\n" +
                "  \"number\" : \"4000008449433403\",\n" +
                "  \"ip\" : \"192.168.1.1\",\n" +
                "  \"region\" : \"EAP\",\n" +
                "  \"date\" : \"2022-01-22T16:00:00\",\n" +
                "  \"result\" : \"ALLOWED\",\n" +
                "  \"feedback\" : \"\"\n" +
                "}, {\n" +
                "  \"transactionId\" : 2,\n" +
                "  \"amount\" : 1,\n" +
                "  \"number\" : \"4000008449433403\",\n" +
                "  \"ip\" : \"192.168.1.1\",\n" +
                "  \"region\" : \"EAP\",\n" +
                "  \"date\" : \"2022-01-22T16:00:00\",\n" +
                "  \"result\" : \"ALLOWED\",\n" +
                "  \"feedback\" : \"\"\n" +
                "}, {\n" +
                "  \"transactionId\" : 3,\n" +
                "  \"amount\" : 199,\n" +
                "  \"number\" : \"4000008449433403\",\n" +
                "  \"ip\" : \"192.168.1.1\",\n" +
                "  \"region\" : \"EAP\",\n" +
                "  \"date\" : \"2022-01-22T16:01:00\",\n" +
                "  \"result\" : \"ALLOWED\",\n" +
                "  \"feedback\" : \"\"\n" +
                "}, {\n" +
                "  \"transactionId\" : 4,\n" +
                "  \"amount\" : 200,\n" +
                "  \"number\" : \"4000008449433403\",\n" +
                "  \"ip\" : \"192.168.1.1\",\n" +
                "  \"region\" : \"EAP\",\n" +
                "  \"date\" : \"2022-01-22T16:02:00\",\n" +
                "  \"result\" : \"ALLOWED\",\n" +
                "  \"feedback\" : \"\"\n" +
                "}, {\n" +
                "  \"transactionId\" : 5,\n" +
                "  \"amount\" : 201,\n" +
                "  \"number\" : \"4000008449433403\",\n" +
                "  \"ip\" : \"192.168.1.1\",\n" +
                "  \"region\" : \"EAP\",\n" +
                "  \"date\" : \"2022-01-22T16:03:00\",\n" +
                "  \"result\" : \"MANUAL_PROCESSING\",\n" +
                "  \"feedback\" : \"\"\n" +
                "}, {\n" +
                "  \"transactionId\" : 6,\n" +
                "  \"amount\" : 1499,\n" +
                "  \"number\" : \"4000008449433403\",\n" +
                "  \"ip\" : \"192.168.1.1\",\n" +
                "  \"region\" : \"EAP\",\n" +
                "  \"date\" : \"2022-01-22T16:04:00\",\n" +
                "  \"result\" : \"MANUAL_PROCESSING\",\n" +
                "  \"feedback\" : \"\"\n" +
                "}, {\n" +
                "  \"transactionId\" : 7,\n" +
                "  \"amount\" : 1500,\n" +
                "  \"number\" : \"4000008449433403\",\n" +
                "  \"ip\" : \"192.168.1.1\",\n" +
                "  \"region\" : \"EAP\",\n" +
                "  \"date\" : \"2022-01-22T16:05:00\",\n" +
                "  \"result\" : \"MANUAL_PROCESSING\",\n" +
                "  \"feedback\" : \"\"\n" +
                "}, {\n" +
                "  \"transactionId\" : 8,\n" +
                "  \"amount\" : 1501,\n" +
                "  \"number\" : \"4000008449433403\",\n" +
                "  \"ip\" : \"192.168.1.1\",\n" +
                "  \"region\" : \"EAP\",\n" +
                "  \"date\" : \"2022-01-22T16:06:00\",\n" +
                "  \"result\" : \"PROHIBITED\",\n" +
                "  \"feedback\" : \"\"\n" +
                "}, {\n" +
                "  \"transactionId\" : 9,\n" +
                "  \"amount\" : 2000,\n" +
                "  \"number\" : \"4000008449433403\",\n" +
                "  \"ip\" : \"192.168.1.1\",\n" +
                "  \"region\" : \"EAP\",\n" +
                "  \"date\" : \"2022-01-22T16:07:00\",\n" +
                "  \"result\" : \"PROHIBITED\",\n" +
                "  \"feedback\" : \"\"\n" +
                "}, {\n" +
                "  \"transactionId\" : 10,\n" +
                "  \"amount\" : 1,\n" +
                "  \"number\" : \"4000008449433403\",\n" +
                "  \"ip\" : \"192.168.1.1\",\n" +
                "  \"region\" : \"EAP\",\n" +
                "  \"date\" : \"2022-01-22T16:00:00\",\n" +
                "  \"result\" : \"ALLOWED\",\n" +
                "  \"feedback\" : \"\"\n" +
                "}, {\n" +
                "  \"transactionId\" : 11,\n" +
                "  \"amount\" : 1000,\n" +
                "  \"number\" : \"4000008449433403\",\n" +
                "  \"ip\" : \"192.168.1.67\",\n" +
                "  \"region\" : \"EAP\",\n" +
                "  \"date\" : \"2022-01-22T16:00:00\",\n" +
                "  \"result\" : \"PROHIBITED\",\n" +
                "  \"feedback\" : \"\"\n" +
                "}, {\n" +
                "  \"transactionId\" : 12,\n" +
                "  \"amount\" : 1000,\n" +
                "  \"number\" : \"4000003305160034\",\n" +
                "  \"ip\" : \"192.168.1.1\",\n" +
                "  \"region\" : \"EAP\",\n" +
                "  \"date\" : \"2022-01-22T16:00:00\",\n" +
                "  \"result\" : \"PROHIBITED\",\n" +
                "  \"feedback\" : \"\"\n" +
                "}, {\n" +
                "  \"transactionId\" : 13,\n" +
                "  \"amount\" : 1000,\n" +
                "  \"number\" : \"4000003305160034\",\n" +
                "  \"ip\" : \"192.168.1.67\",\n" +
                "  \"region\" : \"EAP\",\n" +
                "  \"date\" : \"2022-01-22T16:00:00\",\n" +
                "  \"result\" : \"PROHIBITED\",\n" +
                "  \"feedback\" : \"\"\n" +
                "}, {\n" +
                "  \"transactionId\" : 14,\n" +
                "  \"amount\" : 2000,\n" +
                "  \"number\" : \"4000003305160034\",\n" +
                "  \"ip\" : \"192.168.1.67\",\n" +
                "  \"region\" : \"EAP\",\n" +
                "  \"date\" : \"2022-01-22T16:00:00\",\n" +
                "  \"result\" : \"PROHIBITED\",\n" +
                "  \"feedback\" : \"\"\n" +
                "}, {\n" +
                "  \"transactionId\" : 15,\n" +
                "  \"amount\" : 1,\n" +
                "  \"number\" : \"4000008449433403\",\n" +
                "  \"ip\" : \"192.168.1.2\",\n" +
                "  \"region\" : \"EAP\",\n" +
                "  \"date\" : \"2022-01-22T17:10:00\",\n" +
                "  \"result\" : \"ALLOWED\",\n" +
                "  \"feedback\" : \"\"\n" +
                "}, {\n" +
                "  \"transactionId\" : 16,\n" +
                "  \"amount\" : 1,\n" +
                "  \"number\" : \"4000008449433403\",\n" +
                "  \"ip\" : \"192.168.1.3\",\n" +
                "  \"region\" : \"EAP\",\n" +
                "  \"date\" : \"2022-01-22T17:11:00\",\n" +
                "  \"result\" : \"ALLOWED\",\n" +
                "  \"feedback\" : \"\"\n" +
                "}, {\n" +
                "  \"transactionId\" : 17,\n" +
                "  \"amount\" : 1,\n" +
                "  \"number\" : \"4000008449433403\",\n" +
                "  \"ip\" : \"192.168.1.3\",\n" +
                "  \"region\" : \"EAP\",\n" +
                "  \"date\" : \"2022-01-22T17:12:00\",\n" +
                "  \"result\" : \"ALLOWED\",\n" +
                "  \"feedback\" : \"\"\n" +
                "}, {\n" +
                "  \"transactionId\" : 18,\n" +
                "  \"amount\" : 1,\n" +
                "  \"number\" : \"4000008449433403\",\n" +
                "  \"ip\" : \"192.168.1.4\",\n" +
                "  \"region\" : \"EAP\",\n" +
                "  \"date\" : \"2022-01-22T17:12:00\",\n" +
                "  \"result\" : \"MANUAL_PROCESSING\",\n" +
                "  \"feedback\" : \"\"\n" +
                "}, {\n" +
                "  \"transactionId\" : 19,\n" +
                "  \"amount\" : 1,\n" +
                "  \"number\" : \"4000008449433403\",\n" +
                "  \"ip\" : \"192.168.1.5\",\n" +
                "  \"region\" : \"EAP\",\n" +
                "  \"date\" : \"2022-01-22T17:13:00\",\n" +
                "  \"result\" : \"PROHIBITED\",\n" +
                "  \"feedback\" : \"\"\n" +
                "}, {\n" +
                "  \"transactionId\" : 20,\n" +
                "  \"amount\" : 2000,\n" +
                "  \"number\" : \"4000008449433403\",\n" +
                "  \"ip\" : \"192.168.1.5\",\n" +
                "  \"region\" : \"EAP\",\n" +
                "  \"date\" : \"2022-01-22T17:14:00\",\n" +
                "  \"result\" : \"PROHIBITED\",\n" +
                "  \"feedback\" : \"\"\n" +
                "}, {\n" +
                "  \"transactionId\" : 21,\n" +
                "  \"amount\" : 1,\n" +
                "  \"number\" : \"4000008449433403\",\n" +
                "  \"ip\" : \"192.168.1.2\",\n" +
                "  \"region\" : \"EAP\",\n" +
                "  \"date\" : \"2022-01-21T17:10:00\",\n" +
                "  \"result\" : \"ALLOWED\",\n" +
                "  \"feedback\" : \"\"\n" +
                "}, {\n" +
                "  \"transactionId\" : 22,\n" +
                "  \"amount\" : 1,\n" +
                "  \"number\" : \"4000008449433403\",\n" +
                "  \"ip\" : \"192.168.1.2\",\n" +
                "  \"region\" : \"ECA\",\n" +
                "  \"date\" : \"2022-01-21T17:11:00\",\n" +
                "  \"result\" : \"ALLOWED\",\n" +
                "  \"feedback\" : \"\"\n" +
                "}, {\n" +
                "  \"transactionId\" : 23,\n" +
                "  \"amount\" : 1,\n" +
                "  \"number\" : \"4000008449433403\",\n" +
                "  \"ip\" : \"192.168.1.2\",\n" +
                "  \"region\" : \"ECA\",\n" +
                "  \"date\" : \"2022-01-21T17:12:00\",\n" +
                "  \"result\" : \"ALLOWED\",\n" +
                "  \"feedback\" : \"\"\n" +
                "}, {\n" +
                "  \"transactionId\" : 24,\n" +
                "  \"amount\" : 1,\n" +
                "  \"number\" : \"4000008449433403\",\n" +
                "  \"ip\" : \"192.168.1.2\",\n" +
                "  \"region\" : \"HIC\",\n" +
                "  \"date\" : \"2022-01-21T17:13:00\",\n" +
                "  \"result\" : \"MANUAL_PROCESSING\",\n" +
                "  \"feedback\" : \"\"\n" +
                "}, {\n" +
                "  \"transactionId\" : 25,\n" +
                "  \"amount\" : 1,\n" +
                "  \"number\" : \"4000008449433403\",\n" +
                "  \"ip\" : \"192.168.1.2\",\n" +
                "  \"region\" : \"SSA\",\n" +
                "  \"date\" : \"2022-01-21T17:14:00\",\n" +
                "  \"result\" : \"PROHIBITED\",\n" +
                "  \"feedback\" : \"\"\n" +
                "}, {\n" +
                "  \"transactionId\" : 26,\n" +
                "  \"amount\" : 2000,\n" +
                "  \"number\" : \"4000008449433403\",\n" +
                "  \"ip\" : \"192.168.1.2\",\n" +
                "  \"region\" : \"SA\",\n" +
                "  \"date\" : \"2022-01-21T17:15:00\",\n" +
                "  \"result\" : \"PROHIBITED\",\n" +
                "  \"feedback\" : \"\"\n" +
                "} ]\n";

        private final String historyAnswer2 = "[ {\n" +
                "  \"transactionId\" : 12,\n" +
                "  \"amount\" : 1000,\n" +
                "  \"number\" : \"4000003305160034\",\n" +
                "  \"ip\" : \"192.168.1.1\",\n" +
                "  \"region\" : \"EAP\",\n" +
                "  \"date\" : \"2022-01-22T16:00:00\",\n" +
                "  \"result\" : \"PROHIBITED\",\n" +
                "  \"feedback\" : \"\"\n" +
                "}, {\n" +
                "  \"transactionId\" : 13,\n" +
                "  \"amount\" : 1000,\n" +
                "  \"number\" : \"4000003305160034\",\n" +
                "  \"ip\" : \"192.168.1.67\",\n" +
                "  \"region\" : \"EAP\",\n" +
                "  \"date\" : \"2022-01-22T16:00:00\",\n" +
                "  \"result\" : \"PROHIBITED\",\n" +
                "  \"feedback\" : \"\"\n" +
                "}, {\n" +
                "  \"transactionId\" : 14,\n" +
                "  \"amount\" : 2000,\n" +
                "  \"number\" : \"4000003305160034\",\n" +
                "  \"ip\" : \"192.168.1.67\",\n" +
                "  \"region\" : \"EAP\",\n" +
                "  \"date\" : \"2022-01-22T16:00:00\",\n" +
                "  \"result\" : \"PROHIBITED\",\n" +
                "  \"feedback\" : \"\"\n" +
                "} ]";




        public AntiFraudTest() {
            super(AntiFraudApplication.class, "../service_db.mv.db");
        }

        /**
         * Method for restarting application
         *
         */
        private CheckResult restartApplication() {
            try {
                reloadSpring();
            } catch (Exception ex) {
                throw new UnexpectedError(ex.getMessage());
            }
            return CheckResult.correct();
        }

        private HttpResponse checkResponseStatus(String user, String body,
                                                 int status, String api, String method) {
            HttpRequest request = null;
            switch (method) {
                case "GET":
                    request = get(api);
                    break;
                case "POST":
                    request = post(api, body);
                    break;
                case "PUT":
                    request = put(api, body);
                    break;
                case "DELETE":
                    request = delete(api);
                    break;
            }

            if (user != null) {
                JsonObject userJson = getJson(user).getAsJsonObject();
                String password = userJson.get("password").getAsString();
                String login = userJson.get("username").getAsString().toLowerCase();
                request = request.basicAuth(login, password);
            }
            HttpResponse response = request.send();

            if (response.getStatusCode() != status) {
                throw new WrongAnswer(method + " " + api  + " should respond with "
                        + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                        + "Response body:\n" + response.getContent() + "\n");
            }
            return response;
        }

        public boolean isNumeric(String strNum) {
            if (strNum == null) {
                return false;
            }
            try {
                long l = Long.parseLong(strNum);
            } catch (NumberFormatException nfe) {
                return false;
            }
            return true;
        }

        CheckResult testAddUser(String body, int status, String role, TestHint hint) {

            System.out.println(hint.toString());

            HttpResponse response = checkResponseStatus(null, body, status, userApi, "POST");

            if (response.getStatusCode() == 201) {

                JsonObject rightResponse = getJson(body).getAsJsonObject();
                rightResponse.remove("password");

                // Check is it JSON in response or something else
                if (!response.getJson().isJsonObject()) {
                    return CheckResult.wrong("Wrong object in response, expected JSON but was \n" +
                            response.getContent().getClass());

                }

                JsonObject jsonResponse = response.getJson().getAsJsonObject();

                // Check if password is presence in response
                if (jsonResponse.get("password") != null) {
                    return CheckResult.wrong("You must remove password from response\n" +
                            jsonResponse);
                }

                if (jsonResponse.get("id") == null) {
                    return CheckResult.wrong("Response must contain user ID\n" +
                            "Received response:\n" +
                            jsonResponse);
                }

                if (jsonResponse.get("id").isJsonNull()) {
                    return CheckResult.wrong("Response must contain user ID\n" +
                            "Received response:\n" +
                            jsonResponse);
                }

                if (userIdList.contains(jsonResponse.get("id").getAsInt())) {
                    return CheckResult.wrong("User ID must be unique!\n" +
                            "Received response:\n" +
                            jsonResponse);
                }

                rightResponse.addProperty("id", jsonResponse.get("id").toString());
                // Check JSON in response
                expect(response.getContent()).asJson().check(
                        isObject()
                                .value("id", isInteger())
                                .value("name", rightResponse.get("name").getAsString())
                                .value("role", role)
                                .value("username", isString(s -> s.equalsIgnoreCase(rightResponse.get("username").getAsString())))
                );
                userIdList.add(jsonResponse.get("id").getAsInt());
            }
            return CheckResult.correct();
        }

        CheckResult testDeleteUser(String body, int status, String user, TestHint hint) {

            System.out.println(hint.toString());

            HttpResponse response = checkResponseStatus(body, "", status, userApi + "/" + user, "DELETE");

            if (response.getStatusCode() == 200) {

                // Check is it JSON in response or something else
                if (!response.getJson().isJsonObject()) {
                    return CheckResult.wrong("Wrong object in response, expected JSON but was \n" +
                            response.getContent().getClass());

                }

                JsonObject jsonResponse = response.getJson().getAsJsonObject();

                // Check JSON in response
                expect(response.getContent()).asJson().check(
                        isObject()
                                .value("status", "Deleted successfully!")
                                .value("username", isString(s -> s.equalsIgnoreCase(user)))
                );
            }
            return CheckResult.correct();
        }

        private CheckResult testListUser(String user, int status, String answer,
                                         int position, TestHint hint) {

            System.out.println(hint.toString());

            HttpResponse response = checkResponseStatus(user, "", status, userListApi, "GET");

            if (response.getStatusCode() == 200) {
                // Check is it array of JSON in response or something else
                if (!response.getJson().isJsonArray()) {
                    return CheckResult.wrong("Wrong object in response, expected array of JSON but was \n" +
                            response.getContent().getClass());

                }

                JsonArray correctJson = getJson(answer).getAsJsonArray();
                JsonArray responseJson = getJson(response.getContent()).getAsJsonArray();
                if (responseJson.size() == 0) {
                    throw new WrongAnswer("Empty array in response!");
                }

                if (responseJson.size() != position + 1) {
                    throw new WrongAnswer("Incorrect number - " +  responseJson.size() +
                            " users in response, must be - " + (position + 1));
                }

                // Check JSON in response
                expect(responseJson.get(position).toString()).asJson().check(
                        isObject()
                                .value("id", isInteger())
                                .value("name", correctJson.get(position).getAsJsonObject().get("name").getAsString())
                                .value("role", correctJson.get(position).getAsJsonObject().get("role").getAsString())
                                .value("username",
                                        isString(s -> s.equalsIgnoreCase(correctJson.get(position).getAsJsonObject()
                                                .get("username").getAsString()))
                                ));

            }
            return CheckResult.correct();
        }

        private CheckResult testLock(String user, int status, String operation, String username, TestHint hint) {
            System.out.println(hint.toString());

            JsonObject jsonBody = new JsonObject();
            jsonBody.addProperty("username", username);
            jsonBody.addProperty("operation", operation);

            HttpResponse response = checkResponseStatus(user, jsonBody.toString(), status, lockApi, "PUT");
            if (response.getStatusCode() == 200) {
                expect(response.getContent()).asJson().check(
                        isObject()
                                .value("status", isString(s ->
                                        s.equalsIgnoreCase("User " + username + " " + operation + "ed!"))));
            }
            return CheckResult.correct();
        }

        private CheckResult testRole(String user, int status, String role, String username, TestHint hint) {
            System.out.println(hint.toString());

            JsonObject jsonBody = new JsonObject();
            jsonBody.addProperty("username", username);
            jsonBody.addProperty("role", role);

            HttpResponse response = checkResponseStatus(user, jsonBody.toString(), status, roleApi, "PUT");

            if (response.getStatusCode() == 200) {
                expect(response.getContent()).asJson().check(
                        isObject()
                                .value("id", isInteger())
                                .value("name", isString())
                                .value("role", role)
                                .value("username", isString(s -> s.equalsIgnoreCase(username))));
            }
            return CheckResult.correct();
        }

        private CheckResult testTransaction(String user, String api, String method, int status, String body,
                                            String answer, String answer2, TestHint hint) {

            System.out.println(hint.toString());

            HttpResponse response = checkResponseStatus(user, body, status, api, method);

            // Check JSON in response
            if (response.getStatusCode() == 200) {
                expect(response.getContent()).asJson().check(
                        isObject()
                                .value("result", answer)
                                .value("info", answer2));
            }
            return CheckResult.correct();
        }

        private CheckResult testAddIP(String user, int status, String ip, TestHint hint) {
            System.out.println(hint.toString());

            JsonObject jsonBody = new JsonObject();
            jsonBody.addProperty("ip", ip);

            HttpResponse response = checkResponseStatus(user, jsonBody.toString(), status, ipApi, "POST");
            if (response.getStatusCode() == 200) {
                expect(response.getContent()).asJson().check(
                        isObject()
                                .value("id", isInteger())
                                .value("ip", ip));
            }
            return CheckResult.correct();
        }

        private CheckResult testDeleteIP(String user, int status, String ip, TestHint hint) {
            System.out.println(hint.toString());

            HttpResponse response = checkResponseStatus(user, "", status, ipApi + "/" + ip, "DELETE");
            if (response.getStatusCode() == 200) {
                expect(response.getContent()).asJson().check(
                        isObject()
                                .value("status", "IP " + ip + " successfully removed!"));
            }
            return CheckResult.correct();
        }

        private CheckResult testAddCard(String user, int status, String number, TestHint hint) {
            System.out.println(hint.toString());

            JsonObject jsonBody = new JsonObject();
            jsonBody.addProperty("number", number);

            HttpResponse response = checkResponseStatus(user, jsonBody.toString(), status, cardApi, "POST");
            if (response.getStatusCode() == 200) {
                expect(response.getContent()).asJson().check(
                        isObject()
                                .value("id", isInteger())
                                .value("number", number));
            }
            return CheckResult.correct();
        }

        private CheckResult testDeleteCard(String user, int status, String number, TestHint hint) {
            System.out.println(hint.toString());

            HttpResponse response = checkResponseStatus(user, "", status, cardApi + "/" + number, "DELETE");
            if (response.getStatusCode() == 200) {
                expect(response.getContent()).asJson().check(
                        isObject()
                                .value("status", "Card " + number + " successfully removed!"));
            }
            return CheckResult.correct();
        }

        private CheckResult testGetIP(String user, int status, String answer, TestHint hint) {
            System.out.println(hint.toString());

            HttpResponse response = checkResponseStatus(user, "", status, ipApi, "GET");

            if (response.getStatusCode() == 200) {
                if (!response.getJson().isJsonArray()) {
                    return CheckResult.wrong("Wrong object in response, expected array of JSON but was \n" +
                            response.getContent().getClass());

                }

                JsonArray correctJson = getJson(answer).getAsJsonArray();
                JsonArray responseJson = getJson(response.getContent()).getAsJsonArray();

                if (responseJson.size() != correctJson.size()) {
                    throw new WrongAnswer("Incorrect number - " +  responseJson.size() +
                            " objects in response, must be - " + correctJson.size());
                }

                // Check JSON in response
                for (int i =0; i < correctJson.size(); i++) {
                    expect(responseJson.get(i).toString()).asJson().check(
                            isObject()
                                    .value("id", isInteger())
                                    .value("ip", correctJson.get(i).getAsJsonObject().get("ip").getAsString())
                    );
                }

            }
            return CheckResult.correct();
        }

        private CheckResult testGetCard(String user, int status, String answer, TestHint hint) {
            System.out.println(hint.toString());

            HttpResponse response = checkResponseStatus(user, "", status, cardApi, "GET");

            if (response.getStatusCode() == 200) {
                if (!response.getJson().isJsonArray()) {
                    return CheckResult.wrong("Wrong object in response, expected array of JSON but was \n" +
                            response.getContent().getClass());

                }

                JsonArray correctJson = getJson(answer).getAsJsonArray();
                JsonArray responseJson = getJson(response.getContent()).getAsJsonArray();

                if (responseJson.size() != correctJson.size()) {
                    throw new WrongAnswer("Incorrect number - " +  responseJson.size() +
                            " objects in response, must be - " + correctJson.size());
                }

                // Check JSON in response
                for (int i =0; i < correctJson.size(); i++) {
                    expect(responseJson.get(i).toString()).asJson().check(
                            isObject()
                                    .value("id", isInteger())
                                    .value("number", correctJson.get(i).getAsJsonObject().get("number").getAsString())
                    );
                }

            }
            return CheckResult.correct();
        }

        private CheckResult testGetTr(String user, int status, String answer, TestHint hint) {
            System.out.println(hint.toString());

            HttpResponse response = checkResponseStatus(user, "", status, historyApi, "GET");

            if (response.getStatusCode() == 200) {
                if (!response.getJson().isJsonArray()) {
                    return CheckResult.wrong("Wrong object in response, expected array of JSON but was \n" +
                            response.getContent().getClass());

                }

                JsonArray correctJson = getJson(answer).getAsJsonArray();
                JsonArray responseJson = getJson(response.getContent()).getAsJsonArray();

                if (responseJson.size() != correctJson.size()) {
                    throw new WrongAnswer("Incorrect number - " +  responseJson.size() +
                            " objects in response, must be - " + correctJson.size());
                }

                // Check JSON in response
                for (int i =0; i < correctJson.size(); i++) {
                    expect(responseJson.get(i).toString()).asJson().check(
                            isObject()
                                    .value("transactionId", isInteger())
                                    .value("amount", correctJson.get(i).getAsJsonObject().get("amount").getAsLong())
                                    .value("number", correctJson.get(i).getAsJsonObject().get("number").getAsString())
                                    .value("ip", correctJson.get(i).getAsJsonObject().get("ip").getAsString())
                                    .value("region", correctJson.get(i).getAsJsonObject().get("region").getAsString())
                                    .value("date", correctJson.get(i).getAsJsonObject().get("date").getAsString())
                                    .value("result", correctJson.get(i).getAsJsonObject().get("result").getAsString())
                                    .value("feedback", correctJson.get(i).getAsJsonObject().get("feedback").getAsString())
                    );
                }

            }
            return CheckResult.correct();
        }

        private CheckResult testGetTrByNumber(String user, int status, String answer,
                                              String number, TestHint hint) {
            System.out.println(hint.toString());

            HttpResponse response = checkResponseStatus(user, "", status,
                    historyApi + "/" + number, "GET");

            if (response.getStatusCode() == 200) {
                if (!response.getJson().isJsonArray()) {
                    return CheckResult.wrong("Wrong object in response, expected array of JSON but was \n" +
                            response.getContent().getClass());

                }

                JsonArray correctJson = getJson(answer).getAsJsonArray();
                JsonArray responseJson = getJson(response.getContent()).getAsJsonArray();

                if (responseJson.size() != correctJson.size()) {
                    throw new WrongAnswer("Incorrect number - " +  responseJson.size() +
                            " objects in response, must be - " + correctJson.size());
                }

                // Check JSON in response
                for (int i =0; i < correctJson.size(); i++) {
                    expect(responseJson.get(i).toString()).asJson().check(
                            isObject()
                                    .value("transactionId", isInteger())
                                    .value("amount", correctJson.get(i).getAsJsonObject().get("amount").getAsLong())
                                    .value("number", correctJson.get(i).getAsJsonObject().get("number").getAsString())
                                    .value("ip", correctJson.get(i).getAsJsonObject().get("ip").getAsString())
                                    .value("region", correctJson.get(i).getAsJsonObject().get("region").getAsString())
                                    .value("date", correctJson.get(i).getAsJsonObject().get("date").getAsString())
                                    .value("result", correctJson.get(i).getAsJsonObject().get("result").getAsString())
                                    .value("feedback", correctJson.get(i).getAsJsonObject().get("feedback").getAsString())
                    );
                }

            }
            return CheckResult.correct();
        }

        private CheckResult testFeed(String userS, String userM, int status, int position,
                                     String fb, TestHint hint) {
            System.out.println(hint.toString());
            HttpResponse response = checkResponseStatus(userS, "", 200, historyApi, "GET");

            if (!response.getJson().isJsonArray()) {
                return CheckResult.wrong("Wrong object in response, expected array of JSON but was \n" +
                        response.getContent().getClass());

            }

            JsonArray responseJson = getJson(response.getContent()).getAsJsonArray();
            if (responseJson.size() < (position + 1)) {
                throw new WrongAnswer("Incorrect number - " +  responseJson.size() +
                        " transactions in history, must be at least - " + (position + 1));
            }

            if (!responseJson.get(position).getAsJsonObject().has("transactionId")) {
                return CheckResult.wrong("Json in response must have - 'id' field");
            }

            Long id = responseJson.get(position).getAsJsonObject().get("transactionId").getAsLong();

            JsonObject jsonBody = new JsonObject();
            jsonBody.addProperty("transactionId", id);
            jsonBody.addProperty("feedback", fb);

            response = checkResponseStatus(userM, jsonBody.toString(), status, transactionApi, "PUT");

            JsonObject answerJson = responseJson.get(position).getAsJsonObject();

            if (response.getStatusCode() == 200) {
                expect(response.getContent()).asJson().check(
                        isObject()
                                .value("transactionId", isInteger())
                                .value("amount", answerJson.get("amount").getAsLong())
                                .value("ip", answerJson.get("ip").getAsString())
                                .value("number", answerJson.get("number").getAsString())
                                .value("region", answerJson.get("region").getAsString())
                                .value("date", answerJson.get("date").getAsString())
                                .value("result", answerJson.get("result").getAsString())
                                .value("feedback", fb)
                );
            }
            return CheckResult.correct();
        }

        private CheckResult testNotFoundFeed(String userS, String userM, int status, int position,
                                             String fb, TestHint hint) {
            System.out.println(hint.toString());
            HttpResponse response = checkResponseStatus(userS, "", 200, historyApi, "GET");
            JsonArray responseJson = getJson(response.getContent()).getAsJsonArray();
            if (responseJson.size() < (position + 1)) {
                throw new WrongAnswer("Incorrect number - " +  responseJson.size() +
                        " transactions in history, must be at least - " + (position + 1));
            }
            Long id = responseJson.get(position).getAsJsonObject().get("transactionId").getAsLong() + 12345L;

            JsonObject jsonBody = new JsonObject();
            jsonBody.addProperty("transactionId", id);
            jsonBody.addProperty("feedback", fb);

            return CheckResult.correct();
        }


        @DynamicTest
        DynamicTesting[] dt = new DynamicTesting[]{
                // Test POST request for signup api
                () -> testAddUser(wronguser1, 400, "MERCHANT",
                        new TestHint(userApi, wronguser1, "In case of wrong data in request, endpoint" +
                                " must respond with BAD REQUEST  status (400).")), // 1

                () -> testAddUser(wronguser2, 400, "MERCHANT",
                        new TestHint(userApi, wronguser2, "In case of wrong data in request, endpoint" +
                                " must respond with BAD REQUEST  status (400).")), // 2

                () -> testAddUser(administrator, 201, "ADMINISTRATOR",
                        new TestHint(userApi, johndoe1, "If user successfully added, endpoint" +
                                " must respond with HTTP CREATED status (201) ")), // 3

                () -> testListUser(administrator, 200,  listAnswer1, 0,
                        new TestHint(userListApi, "", "Endpoint must respond with HTTP OK status (200)" +
                                " and body with array of objects representing the users sorted by ID in ascending order.")), // 4


                () -> testAddUser(johndoe1, 201, "MERCHANT",
                        new TestHint(userApi, johndoe1, "If user successfully added, endpoint" +
                                " must respond with HTTP CREATED status (201) ")), // 5

                () -> testListUser(administrator, 200,  listAnswer1, 1,
                        new TestHint(userListApi, "", "Endpoint must respond with HTTP OK status (200)" +
                                " and body with array of objects representing the users sorted by ID in ascending order.")), // 6

                () -> testListUser(wronguserCred1, 401,  listAnswer1, 0,
                        new TestHint(userListApi, "", "A user with incorrect credentials is not allowed")), // 7

                () -> testListUser(wronguserCred2, 401,  listAnswer1, 0,
                        new TestHint(userListApi, "", "A user with incorrect credentials is not allowed")), // 8

                () -> testTransaction(johndoe1, transactionApi, "POST", 401,tr1,
                        "ALLOWED", "none",
                        new TestHint(transactionApi, "", "Merchant after registration" +
                                " must be LOCKED")), // 9

                () -> testLock(administrator, 200, "UNLOCK", "johndoe1",
                        new TestHint(lockApi, "", "A user johndoe1 must be UNLOCKED")), // 10

                () -> testRole(administrator,200,"SUPPORT", "johndoe1",
                        new TestHint(roleApi, "", "If a role successfully changed," +
                                " respond with the HTTP OK status (200)")), // 11

                () -> testGetTr(johndoe1, 200, "[]",
                        new TestHint(historyApi, "", "User johndoe1 must be unlocked." +
                                "Endpoint must respond with the HTTP OK status (200) and" +
                                " empty array in case if history is empty.")), // 12


                () -> testRole(administrator,200,"MERCHANT", "johndoe1",
                        new TestHint(roleApi, "", "If a role successfully changed," +
                                " respond with the HTTP OK status (200)")), // 13


                () -> testTransaction(johndoe1, transactionApi, "POST", 200,tr1,
                        "ALLOWED", "none",
                        new TestHint(transactionApi, "", "A user johndoe1 must be UNLOCKED")), // 14

                () -> testTransaction(johndoe1, transactionApi, "POST", 200,tr1,
                        "ALLOWED", "none",
                        new TestHint(transactionApi, "amount = 1", "Result validating of Transaction" +
                                " must be 'ALLOWED'")), // 15

                // Testing persistence
                () -> restartApplication(), // 16

                () -> testListUser(administrator, 200,  listAnswer1, 1,
                        new TestHint(userListApi, "", "After restart user must exist")), // 17

                () -> testAddUser(johndoe1, 409, "MERCHANT",
                        new TestHint(userApi, johndoe1, "In case of an attempt to register an existing user," +
                                " endpoint must respond with HTTP CONFLICT status (409).")), // 18

                () -> testAddUser(johndoe2, 201, "MERCHANT",
                        new TestHint(userApi, johndoe2, "If user successfully added, endpoint" +
                                " must respond with HTTP CREATED status (201) ")), // 19

                () -> testListUser(administrator, 200,  listAnswer1, 2,
                        new TestHint(userListApi, "", "Endpoint must respond with HTTP OK status (200)" +
                                " and body with array of objects representing the users sorted by ID in ascending order.")), // 20

                () -> testTransaction(johndoe1, transactionApi, "POST", 200, tr2,
                        "ALLOWED", "none",
                        new TestHint(transactionApi, "amount = 199", "Result validating of Transaction" +
                                " must be 'ALLOWED'")), // 21

                () -> testTransaction(johndoe1, transactionApi, "POST", 200, tr3,
                        "ALLOWED", "none",
                        new TestHint(transactionApi, "amount = 200", "Result validating of Transaction" +
                                " must be 'ALLOWED'")), // 22

                () -> testTransaction(johndoe1, transactionApi, "POST", 200, tr4,
                        "MANUAL_PROCESSING", "amount",
                        new TestHint(transactionApi, "amount = 201", "Result validating of Transaction" +
                                " must be 'MANUAL_PROCESSING'")), // 23

                () -> testTransaction(johndoe1, transactionApi, "POST", 200, tr5,
                        "MANUAL_PROCESSING", "amount",
                        new TestHint(transactionApi, "amount = 1499", "Result validating of Transaction" +
                                " must be 'MANUAL_PROCESSING'")), // 24

                () -> testTransaction(johndoe1, transactionApi, "POST", 200, tr6,
                        "MANUAL_PROCESSING", "amount",
                        new TestHint(transactionApi, "amount = 1500", "Result validating of Transaction" +
                                " must be 'MANUAL_PROCESSING'")), // 25

                () -> testTransaction(johndoe1, transactionApi, "POST", 200, tr7,
                        "PROHIBITED", "amount",
                        new TestHint(transactionApi, "amount = 1501", "Result validating of Transaction" +
                                " must be 'PROHIBITED'")), // 26

                () -> testTransaction(johndoe1, transactionApi, "POST", 200, tr8,
                        "PROHIBITED", "amount",
                        new TestHint(transactionApi, "amount = 2000", "Result validating of Transaction" +
                                " must be 'PROHIBITED'")), // 27

                () -> testTransaction(johndoe1, transactionApi, "POST", 400, trW1,
                        "Wrong request!", "none",
                        new TestHint(transactionApi, "amount = -1", "Response status" +
                                " must be 'Bad request'")), // 28

                () -> testTransaction(johndoe1, transactionApi, "POST", 400, trW2,
                        "Wrong request!", "none",
                        new TestHint(transactionApi, "amount = 0", "Response status" +
                                " must be 'Bad request'")), // 29

                () -> testTransaction(johndoe1, transactionApi, "POST", 400,trW3,
                        "Wrong request!", "none",
                        new TestHint(transactionApi, "amount = null", "Response status" +
                                " must be 'Bad request'")), // 30

                () -> testTransaction(johndoe1, transactionApi, "POST", 400,trW4,
                        "Wrong request!", "none",
                        new TestHint(transactionApi, "amount = \"\"", "Response status" +
                                " must be 'Bad request'")), // 31

                () -> testTransaction(johndoe1, transactionApi, "POST", 400, trW5,
                        "Wrong request!",  "none",
                        new TestHint(transactionApi, "amount = \" \"", "Response status" +
                                " must be 'Bad request'")), // 32

                () -> testTransaction(johndoe1, transactionApi, "POST", 400, trW6,
                        "Wrong request!",   "none",
                        new TestHint(transactionApi, "empty body", "Response status" +
                                " must be 'Bad request'")), // 33

                () -> testDeleteUser(administrator,404,"somebody",
                        new TestHint(userApi, userApi + "/" + "somebody", "If a user is not found," +
                                " respond with HTTP Not Found status (404).")), // 34

                () -> testDeleteUser(administrator,200,"johndoe1",
                        new TestHint(userApi, userApi + "/" + "johndoe1", "The endpoint must delete" +
                                " the user and respond with HTTP OK status (200)")), // 35

                () -> testListUser(administrator, 200,  listAnswer2, 1,
                        new TestHint(userListApi, "", "User 'johndoe1' must be delete")), // 36

                () -> testRole(administrator,404,"MERCHANT", "johndoe22",
                        new TestHint(roleApi, "", "If a user is not found, endpoint" +
                                " must respond with the HTTP Not Found status (404).")), // 37

                () -> testRole(administrator,400,"USER", "johndoe2",
                        new TestHint(roleApi, "", "If a role is not found, endpoint" +
                                " must respond with the HTTP Bad Request status (400).")), // 38

                () -> testRole(administrator,400,"ADMINISTRATOR", "johndoe2",
                        new TestHint(roleApi, "", "If a role is ADMINISTRATOR, endpoint" +
                                " must respond with the HTTP Bad Request status (400).")), // 39

                () -> testRole(administrator,200,"SUPPORT", "johndoe2",
                        new TestHint(roleApi, "", "If a role successfully changed," +
                                " respond with the HTTP OK status (200)")), // 40

                () -> testRole(administrator,409,"SUPPORT", "johndoe2",
                        new TestHint(roleApi, "", "If a role already assigned to a user," +
                                " endpoint must respond with the HTTP Conflict status (409).")), // 41

                () -> testLock(administrator, 200, "UNLOCK", "johndoe2",
                        new TestHint(lockApi, "", "A user johndoe2 must be UNLOCKED")), // 42

                () -> testListUser(johndoe2, 200,  listAnswer3, 1,
                        new TestHint(userListApi, "", "Role for user 'johndoe2" +
                                "' must be changed to SUPPORT")), // 43

                () -> testTransaction(johndoe2, transactionApi, "POST", 403, tr1,
                        "ALLOWED",   "none",
                        new TestHint(transactionApi, "", "Role MERCHANT must be removed from" +
                                " user johndoe2!")), // 44

                // test Locking
                () -> testAddUser(johndoe3, 201, "MERCHANT",
                        new TestHint(userApi, johndoe3, "If user successfully added, endpoint" +
                                " must respond with HTTP CREATED status (201) ")), // 45

                () -> testTransaction(johndoe3, transactionApi, "POST", 401, tr1,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "MERCHANT user after registration" +
                                " must be LOCKED")), // 46

                () -> testLock(administrator, 200, "UNLOCK", "johndoe3",
                        new TestHint(lockApi, "", "A user johndoe3 must be UNLOCKED")), // 47

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, tr1,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "A user johndoe3 must be UNLOCKED")), // 48

                () -> testLock(administrator, 200, "LOCK", "johndoe3",
                        new TestHint(lockApi, "", "A user johndoe3 must be LOCKED")), // 49

                () -> testTransaction(johndoe3, transactionApi, "POST", 401, tr1,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "A user johndoe3 must be LOCKED")), // 50

                () -> testLock(administrator, 200, "UNLOCK", "johndoe3",
                        new TestHint(lockApi, "", "A user johndoe3 must be UNLOCKED")), // 51

                // test role model
                () -> testTransaction(administrator, transactionApi, "POST", 403, tr1,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "A user with role ADMINISTRATOR" +
                                " must not have access to " + transactionApi)), // 52

                () -> testTransaction(johndoe2, transactionApi, "POST", 403, tr1,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "A user with role SUPPORT" +
                                " must not have access to " + transactionApi)), // 53

                () -> testTransaction(null, transactionApi, "POST", 401, tr1,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "A user with role ANONYMOUS" +
                                " must not have access to " + transactionApi)), // 54

                () -> testDeleteUser(null,401,"johndoe1",
                        new TestHint(userApi, "", "A user with role ANONYMOUS" +
                                " must not have access to DELETE " + userApi)), // 55

                () -> testDeleteUser(johndoe2,403,"johndoe1",
                        new TestHint(userApi, "", "A user with role SUPPORT" +
                                " must not have access to DELETE " + userApi)), // 56

                () -> testDeleteUser(johndoe3,403,"johndoe1",
                        new TestHint(userApi, "", "A user with role MERCHANT" +
                                " must not have access to DELETE " + userApi)), // 57

                () -> testListUser(null, 401,  listAnswer3, 1,
                        new TestHint(userListApi, "", "A user with role ANONYMOUS" +
                                " must not have access to " + userListApi)), // 58

                () -> testListUser(johndoe3, 403,  listAnswer3, 1,
                        new TestHint(userListApi, "", "A user with role MERCHANT" +
                                " must not have access to " + userListApi)), // 59

                () -> testGetIP(administrator, 403, ipAnswerEmpty,
                        new TestHint(ipApi, "", "A user with role ADMINISTRATOR" +
                                " must not have access to GET " + ipApi)), // 60

                () -> testGetIP(johndoe3, 403, ipAnswerEmpty,
                        new TestHint(ipApi, "", "A user with role MERCHANT" +
                                " must not have access to GET " + ipApi)), // 61

                () -> testAddIP(administrator, 403, "192.168.1.66",
                        new TestHint(ipApi, "", "A user with role ADMINISTRATOR" +
                                " must not have access to POST " + ipApi)), // 62

                () -> testAddIP(johndoe3, 403, "192.168.1.66",
                        new TestHint(ipApi, "", "A user with role MERCHANT" +
                                " must not have access to POST " + ipApi)), // 63

                () -> testDeleteIP(administrator, 403, "192.168.1.66",
                        new TestHint(ipApi, "", "A user with role ADMINISTRATOR" +
                                " must not have access to DELETE " + ipApi)), // 64

                () -> testDeleteIP(johndoe3, 403, "192.168.1.66",
                        new TestHint(ipApi, "", "A user with role MERCHANT" +
                                " must not have access to DELETE " + ipApi)), // 65

                () -> testGetCard(administrator, 403, cardAnswerEmpty,
                        new TestHint(cardApi, "", "A user with role ADMINISTRATOR" +
                                " must not have access to GET " + cardApi)), // 66

                () -> testGetCard(johndoe3, 403, cardAnswerEmpty,
                        new TestHint(cardApi, "", "A user with role MERCHANT" +
                                " must not have access to GET " + cardApi)), // 67

                () -> testAddCard(administrator, 403, "4000003305061034",
                        new TestHint(cardApi, "", "A user with role ADMINISTRATOR" +
                                " must not have access to POST " + cardApi)), // 68

                () -> testAddCard(johndoe3, 403, "4000003305061034",
                        new TestHint(cardApi, "", "A user with role MERCHANT" +
                                " must not have access to POST " + cardApi)), // 69

                () -> testDeleteIP(administrator, 403, "4000003305061034",
                        new TestHint(cardApi, "", "A user with role ADMINISTRATOR" +
                                " must not have access to DELETE " + cardApi)), // 70

                () -> testDeleteIP(johndoe3, 403, "4000003305061034",
                        new TestHint(cardApi, "", "A user with role MERCHANT" +
                                " must not have access to DELETE " + cardApi)), // 71


                // Test ip black list
                () -> testGetIP(johndoe2, 200, ipAnswerEmpty,
                        new TestHint(ipApi, "", "Endpoint must respond with empty array")), // 72

                () -> testAddIP(johndoe2, 200, "192.168.1.66",
                        new TestHint(ipApi, "", "IP must be added to Black List")), // 73

                () -> testAddIP(johndoe2, 409, "192.168.1.66",
                        new TestHint(ipApi, "", "If IP already in database, " +
                                " endpoint must respond with the HTTP Conflict status (409).")), // 74

                () -> testAddIP(johndoe2, 400, "192.168.351.66",
                        new TestHint(ipApi, "", "If IP doesn't have right format," +
                                " respond with HTTP Bad Request status (400)")), // 75

                () -> testAddIP(johndoe2, 400, "192.168.1.",
                        new TestHint(ipApi, "", "If IP doesn't have right format," +
                                " respond with HTTP Bad Request status (400)")), // 76

                () -> testAddIP(johndoe2, 200, "192.168.1.67",
                        new TestHint(ipApi, "", "IP must be added to Black List")), // 77

                () -> testGetIP(johndoe2, 200, ipAnswer,
                        new TestHint(ipApi, "", "Endpoint must responds with Black List")), // 78

                () -> testDeleteIP(johndoe2, 200, "192.168.1.66",
                        new TestHint(ipApi, "", "IP must be removed from Black List")), // 79

                () -> testDeleteIP(johndoe2, 404, "192.168.1.66",
                        new TestHint(ipApi, "", "If IP not found in database, " +
                                "respond with the HTTP Not Found status (404).")), // 80

                () -> testDeleteIP(johndoe2, 400, "192.168.1.",
                        new TestHint(ipApi, "", "If IP doesn't have right format," +
                                " respond with HTTP Bad Request status (400)")), // 81

                () -> testGetIP(johndoe2, 200, ipAnswer2,
                        new TestHint(ipApi, "", "IP must be removed from Black List")), // 82


                // Test card number black list
                () -> testGetCard(johndoe2, 200, cardAnswerEmpty,
                        new TestHint(cardApi, "", "Endpoint must respond with empty array")), // 83

                () -> testAddCard(johndoe2, 200, "4000003305061034",
                        new TestHint(cardApi, "", "A card must be added to Black List")), // 84

                () -> testAddCard(johndoe2, 409, "4000003305061034",
                        new TestHint(cardApi, "", "If card-number already in database, " +
                                "endpoint must respond with the HTTP Conflict status (409).")), // 85

                () -> testAddCard(johndoe2, 400, "400000330506103",
                        new TestHint(cardApi, "", "If card-number doesn't have right format, " +
                                "endpoint must respond with HTTP Bad Request status (400).")), // 86

                () -> testAddCard(johndoe2, 400, "4000003305061033",
                        new TestHint(cardApi, "", "If checksum of card-number is wrong, " +
                                "endpoint must respond with HTTP Bad Request status (400).")), // 87

                () -> testAddCard(johndoe2, 200, "4000003305160034",
                        new TestHint(cardApi, "", "A card must be added to Black List")), // 88

                () -> testGetCard(johndoe2, 200, cardAnswer,
                        new TestHint(cardApi, "", "Endpoint must responds with Black List")), // 89

                () -> testDeleteCard(johndoe2, 200, "4000003305061034",
                        new TestHint(cardApi, "", "Card must be removed from Black List")), // 90

                () -> testDeleteCard(johndoe2, 404, "4000003305061034",
                        new TestHint(cardApi, "", "If card-number not found in database," +
                                " respond with the HTTP Not Found status (404).")), // 91

                () -> testDeleteCard(johndoe2, 400, "400000330506103",
                        new TestHint(cardApi, "", "If card-number doesn't have right format, " +
                                "endpoint must respond with HTTP Bad Request status (400).")), // 92

                () -> testGetCard(johndoe2, 200, cardAnswer2,
                        new TestHint(cardApi, "", "Card must be removed from Black List")), // 93

                // Test new validating
                () -> testTransaction(johndoe3, transactionApi, "POST", 200, trP1,
                        "PROHIBITED",  "ip",
                        new TestHint(transactionApi, "", "Transaction must be PROHIBITED" +
                                " due to - suspicious ip reason")), // 94

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, trP2,
                        "PROHIBITED",  "card-number",
                        new TestHint(transactionApi, "", "Transaction must be PROHIBITED" +
                                " due to - stolen card reason")), // 95

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, trP3,
                        "PROHIBITED",  "card-number, ip",
                        new TestHint(transactionApi, "", "Transaction must be PROHIBITED" +
                                " due to - stolen card, suspicious ip reasons")), // 96

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, trP4,
                        "PROHIBITED",  "amount, card-number, ip",
                        new TestHint(transactionApi, "", "Transaction must be PROHIBITED" +
                                " due to - amount, stolen card, suspicious ip reasons")), // 97

                // Test correlation rules
                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr1IP,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "Transaction must be ALLOWED")), // 98

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr2IP,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "Transaction must be ALLOWED")), // 99

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr22IP,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "Transaction must be ALLOWED")), // 100

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr3IP,
                        "MANUAL_PROCESSING",  "ip-correlation",
                        new TestHint(transactionApi, "", "Transaction must be MANUAL_PROCESSING" +
                                " due to - ip correlation rule")), // 101

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr4IP,
                        "PROHIBITED",  "ip-correlation",
                        new TestHint(transactionApi, "", "Transaction must be PROHIBITED" +
                                " due to - ip correlation rule")), // 102

                () -> testAddCard(johndoe2, 200, "4000008449433403",
                        new TestHint(cardApi, "", "A card must be added to Black List")), // 103

                () -> testAddIP(johndoe2, 200, "192.168.1.5",
                        new TestHint(ipApi, "", "IP must be added to Black List")), // 104

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr5IP,
                        "PROHIBITED",  "amount, card-number, ip, ip-correlation",
                        new TestHint(transactionApi, "", "Transaction must be PROHIBITED" +
                                " due to - amount, card-number, ip, ip-correlation reasons")), // 105
                //
                () -> testDeleteCard(johndoe2, 200, "4000008449433403",
                        new TestHint(cardApi, "", "Card must be removed from Black List")), // 106

                () -> testDeleteIP(johndoe2, 200, "192.168.1.5",
                        new TestHint(ipApi, "", "IP must be removed from Black List")), // 107


                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr1Reg,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "Transaction must be ALLOWED")), // 108

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr2Reg,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "Transaction must be ALLOWED")), // 109

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr22Reg,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "Transaction must be ALLOWED")), // 110

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr3Reg,
                        "MANUAL_PROCESSING",  "region-correlation",
                        new TestHint(transactionApi, "", "Transaction must be MANUAL_PROCESSING" +
                                " due to - region correlation rule")), // 111

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr4Reg,
                        "PROHIBITED",  "region-correlation",
                        new TestHint(transactionApi, "", "Transaction must be PROHIBITED" +
                                " due to - region correlation rule")), // 112

                () -> testAddCard(johndoe2, 200, "4000008449433403",
                        new TestHint(cardApi, "", "A card must be added to Black List")), // 113

                () -> testAddIP(johndoe2, 200, "192.168.1.2",
                        new TestHint(ipApi, "", "IP must be added to Black List")), // 114

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr5Reg,
                        "PROHIBITED",  "amount, card-number, ip, region-correlation",
                        new TestHint(transactionApi, "", "Transaction must be PROHIBITED" +
                                " due to - amount, card-number, ip, region-correlation reasons")), // 115


                // Stage 6 let's go

                // Preparations
                () -> testDeleteCard(johndoe2, 200, "4000008449433403",
                        new TestHint(cardApi, "", "Card must be removed from Black List")), // 116

                // Test history negative
                () -> testGetTrByNumber(johndoe2, 404, historyAnswer2, "4000004938320896",
                        new TestHint(historyApi + "/4000004938320896", "", "If transactions " +
                                "for specified card number is not found in database," +
                                " respond with the HTTP Not Found status (404).")), // 117

                () -> testGetTrByNumber(johndoe2, 400, historyAnswer2, "4000008449433402",
                        new TestHint(historyApi + "/4000008449433402", "", "If card-number " +
                                "doesn't have right format (Luhn algo), respond with HTTP Bad Request status (400).")), // 118

                // Test Feedback negative
                () -> testFeed(johndoe2, johndoe2, 422, 0, "ALLOWED",
                        new TestHint(transactionApi, "", "If feedback must throw Exception due to" +
                                " table in description section, respond with HTTP Unprocessable Entity status 422.")), // 119

                () -> testFeed(johndoe2, johndoe2, 422, 4, "MANUAL_PROCESSING",
                        new TestHint(transactionApi, "", "If feedback must throw Exception due to" +
                                " table in description section, respond with HTTP Unprocessable Entity status 422.")), // 120

                () -> testFeed(johndoe2, johndoe2, 422, 7, "PROHIBITED",
                        new TestHint(transactionApi, "", "If feedback must throw Exception due to" +
                                " table in description section, respond with HTTP Unprocessable Entity status 422.")), // 121

                () -> testNotFoundFeed(johndoe2, johndoe2, 404, 25, "PROHIBITED",
                        new TestHint(transactionApi, "", "If transaction is not found in history," +
                                " respond with the HTTP Not Found status (404).")), // 122

                // test Role model
                () -> testFeed(johndoe2, null, 401, 7, "PROHIBITED",
                        new TestHint(transactionApi, "", "A user with role ANONYMOUS" +
                                " must not have access to PUT " + transactionApi)), // 123

                () -> testFeed(johndoe2, administrator, 403, 7, "PROHIBITED",
                        new TestHint(transactionApi, "", "A user with role ADMINISTRATOR" +
                                " must not have access to PUT " + transactionApi)), // 124

                () -> testFeed(johndoe2, johndoe3, 403, 7, "PROHIBITED",
                        new TestHint(transactionApi, "", "A user with role MERCHANT" +
                                " must not have access to PUT " + transactionApi)), // 125

                () -> testGetTr(null, 401, historyAnswer,
                        new TestHint(historyApi, "", "A user with role ANONYMOUS" +
                                " must not have access to GET " + historyApi)), // 126

                () -> testGetTrByNumber(null, 401, historyAnswer2, "4000003305160034",
                        new TestHint(historyApi + "/4000003305160034", "", "A user with" +
                                " role ANONYMOUS must not have access to GET " + historyApi)), // 127

                () -> testGetTr(administrator, 403, historyAnswer,
                        new TestHint(historyApi, "", "A user with role ADMINISTRATOR" +
                                " must not have access to GET " + historyApi)), // 128

                () -> testGetTrByNumber(administrator, 403, historyAnswer2, "4000003305160034",
                        new TestHint(historyApi + "/4000003305160034", "", "A user with" +
                                " role ADMINISTRATOR must not have access to GET " + historyApi)), // 129

                () -> testGetTr(johndoe3, 403, historyAnswer,
                        new TestHint(historyApi, "", "A user with role MERCHANT" +
                                " must not have access to GET " + historyApi)), // 130

                () -> testGetTrByNumber(johndoe3, 403, historyAnswer2, "4000003305160034",
                        new TestHint(historyApi + "/4000003305160034", "", "A user with" +
                                " role MERCHANT must not have access to GET " + historyApi)), // 131


                // test History positive
                () -> testGetTr(johndoe2, 200, historyAnswer,
                        new TestHint(historyApi, "", "Endpoint must respond with the" +
                                " HTTP OK status (200) and body with array of JSON objects representing transactions," +
                                " sorted by id in ascending order")), // 132

                () -> testGetTrByNumber(johndoe2, 200, historyAnswer2, "4000003305160034",
                        new TestHint(historyApi + "/4000003305160034", "", "If transactions" +
                                " for specified card number is found, respond with the HTTP OK status (200)")), // 133


                // Test changing coefficients
                // Result - MANUAL_PROCESSING, FeedBack - ALLOWED
                () -> testTransaction(johndoe3, transactionApi, "POST", 200, tr9,
                        "MANUAL_PROCESSING",  "amount",
                        new TestHint(transactionApi, "", "Transaction must be MANUAL_PROCESSING")), // 134

                () -> testFeed(johndoe2, johndoe2, 200, 26, "ALLOWED",
                        new TestHint(transactionApi, "", "The limits of transaction validation updated." +
                                "Endpoint responds with the HTTP OK status (200)")), // 135

                () -> testFeed(johndoe2, johndoe2, 409, 26, "PROHIBITED",
                        new TestHint(transactionApi, "", "If feedback for specified transaction" +
                                " is already in database, respond with the HTTP Conflict status (409).")), // 136

                () -> testFeed(johndoe2, johndoe2, 400, 26, "ALLOWEDD",
                        new TestHint(transactionApi, "", "If feedback doesn't have right format" +
                                " (ALLOWED, MANUAL_PROCESSING, PROHIBITED), respond with HTTP Bad Request status (400).")), // 137

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, tr10,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "Limits must be updated to:" +
                                " Allow = 202, Manual = 1500. Transaction must be ALLOWED")), // 138


                // Result - MANUAL_PROCESSING, FeedBack - PROHIBITED
                () -> testTransaction(johndoe3, transactionApi, "POST", 200, tr11,
                        "MANUAL_PROCESSING",  "amount",
                        new TestHint(transactionApi, "", "Transaction must be MANUAL_PROCESSING")), // 139

                () -> testFeed(johndoe2, johndoe2, 200, 28, "PROHIBITED",
                        new TestHint(transactionApi, "", "The limits of transaction validation updated." +
                                "Endpoint responds with the HTTP OK status (200)")), // 140

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, tr12,
                        "PROHIBITED",  "amount",
                        new TestHint(transactionApi, "", "Limits must be updated to:" +
                                " Allow = 202, Manual = 1160. " +
                                "Transaction must be PROHIBITED")), // 141


                // Result - ALLOWED, FeedBack - MANUAL_PROCESSING
                () -> testTransaction(johndoe3, transactionApi, "POST", 200, tr1,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "Transaction must be ALLOWED")), // 142

                () -> testFeed(johndoe2, johndoe2, 200, 30, "MANUAL_PROCESSING",
                        new TestHint(transactionApi, "", "The limits of transaction validation updated." +
                                "Endpoint responds with the HTTP OK status (200)")), // 143

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, tr13,
                        "MANUAL_PROCESSING",  "amount",
                        new TestHint(transactionApi, "", "Limits must be updated to:" +
                                " Allow = 162, Manual = 1160. Transaction must be MANUAL_PROCESSING")), // 144


                // Result - ALLOWED, FeedBack - PROHIBITED
                () -> testTransaction(johndoe3, transactionApi, "POST", 200, tr1,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "Transaction must be ALLOWED")), // 145

                () -> testFeed(johndoe2, johndoe2, 200, 32, "PROHIBITED",
                        new TestHint(transactionApi, "", "The limits of transaction validation updated." +
                                "Endpoint responds with the HTTP OK status (200)")), // 146

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, tr14,
                        "MANUAL_PROCESSING",  "amount",
                        new TestHint(transactionApi, "", "Limits must be updated to:" +
                                " Allow = 130, Manual = 928. Transaction must be MANUAL_PROCESSING")), // 147

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, tr15,
                        "PROHIBITED",  "amount",
                        new TestHint(transactionApi, "", "Limits must be updated to:" +
                                " Allow = 130, Manual = 928. Transaction must be PROHIBITED")), // 148


                // Result - PROHIBITED, FeedBack - ALLOWED
                () -> testFeed(johndoe2, johndoe2, 200, 34, "ALLOWED",
                        new TestHint(transactionApi, "", "The limits of transaction validation updated." +
                                "Endpoint responds with the HTTP OK status (200)")), // 149

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, tr16,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "Limits must be updated to:" +
                                " Allow = 290, Manual = 929. Transaction must be ALLOWED")), // 150

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, tr15,
                        "MANUAL_PROCESSING",  "amount",
                        new TestHint(transactionApi, "", "Limits must be updated to:" +
                                " Allow = 290, Manual = 929. Transaction must be MANUAL_PROCESSING")), // 151

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, tr17,
                        "PROHIBITED",  "amount",
                        new TestHint(transactionApi, "", "PROHIBITED")), // 152


                // Result - PROHIBITED, FeedBack - MANUAL_PROCESSING
                () -> testFeed(johndoe2, johndoe2, 200, 37, "MANUAL_PROCESSING",
                        new TestHint(transactionApi, "", "The limits of transaction validation updated." +
                                "Endpoint responds with the HTTP OK status (200)")), // 153

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, tr17,
                        "MANUAL_PROCESSING",  "amount",
                        new TestHint(transactionApi, "", "Limits must be updated to:" +
                                " Allow = 290, Manual = 930. Transaction must be MANUAL_PROCESSING")), // 154

                () -> restartApplication(), // 155

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, tr18,
                        "PROHIBITED",  "amount",
                        new TestHint(transactionApi, "", "Limits must be updated to:" +
                                " Allow = 290, Manual = 930. Transaction must be PROHIBITED")), // 156

        };
    }
  learner_created: false
- name: src/antifraud/business/model/entity/Transaction.java
  visible: true
  text: |
    package antifraud.business.model.entity;

    import antifraud.business.model.enums.Region;
    import antifraud.business.model.enums.TransactionStatus;

    import javax.persistence.*;
    import java.time.LocalDateTime;

    @Entity
    public class Transaction {
        @Id
        @Column
        @GeneratedValue(strategy = GenerationType.AUTO)
        private long id;

        @Column
        private long amount;

        @Column
        private String ip;

        @Column
        private String number;

        @Enumerated(EnumType.STRING)
        private Region region;

        @Column
        private LocalDateTime dateTime;

        @Enumerated(EnumType.STRING)
        private TransactionStatus status;

        public Transaction() {
        }

        public Transaction(long amount, String ip, String number, Region region, LocalDateTime dateTime, TransactionStatus status) {
            this.amount = amount;
            this.ip = ip;
            this.number = number;
            this.region = region;
            this.dateTime = dateTime;
            this.status = status;
        }

        @Override
        public String toString() {
            return "Transaction{" +
                    "id=" + id +
                    ", amount=" + amount +
                    ", ip='" + ip + '\'' +
                    ", number='" + number + '\'' +
                    ", region=" + region +
                    ", dateTime=" + dateTime +
                    ", status=" + status +
                    '}';
        }

        public long getId() {
            return id;
        }

        public long getAmount() {
            return amount;
        }

        public String getIp() {
            return ip;
        }

        public String getNumber() {
            return number;
        }

        public Region getRegion() {
            return region;
        }

        public LocalDateTime getDateTime() {
            return dateTime;
        }

        public TransactionStatus getStatus() {
            return status;
        }
    }
  learner_created: true
- name: src/antifraud/presentation/DTO/transaction/TransactionRequestDTO.java
  visible: true
  text: |
    package antifraud.presentation.DTO.transaction;

    import antifraud.business.model.enums.Region;
    import antifraud.presentation.validation.ValidCardNumber;
    import antifraud.presentation.validation.ValidIP;
    import com.fasterxml.jackson.annotation.JsonProperty;

    import javax.validation.constraints.NotNull;
    import java.time.LocalDateTime;

    public record TransactionRequestDTO(@NotNull long amount,
                                        @ValidIP String ip,
                                        @ValidCardNumber String number,
                                        Region region,
                                        @JsonProperty("date") LocalDateTime dateTime) {
    }
  learner_created: true
- name: src/antifraud/business/model/enums/Region.java
  visible: true
  text: |
    package antifraud.business.model.enums;

    public enum Region {
        EAP("East Asia and Pacific"),
        ECA("Europe and Central Asia"),
        HIC("High Income Countries"),
        LAC("Latin America and the Caribbean"),
        MENA("The Middle East and North Africa"),
        SA("South Asia"),
        SSA("Sub-Saharan Africa");

        private final String description;

        Region(String description) {
            this.description = description;
        }

        public String getDescription() {
            return description;
        }
    }
  learner_created: true
- name: src/antifraud/presentation/DTO/user/UserResponseDTO.java
  visible: true
  text: |
    package antifraud.presentation.DTO.user;

    public record UserResponseDTO(long id, String name, String username, String role) {
    }
  learner_created: true
- name: src/antifraud/business/model/entity/IP.java
  visible: true
  text: |
    package antifraud.business.model.entity;


    import javax.persistence.*;

    @Entity
    @Table(name = "suspicious_ip")
    public class IP {
        @Id
        @GeneratedValue(strategy = GenerationType.AUTO)
        private long id;

        @Column(unique = true)
        private String ip;

        public IP() {
        }

        public IP(String ip) {
            this.ip = ip;
        }

        public long getId() {
            return id;
        }

        public void setId(long id) {
            this.id = id;
        }

        public String getIp() {
            return ip;
        }

        public void setIp(String ip) {
            this.ip = ip;
        }
    }
  learner_created: true
- name: src/antifraud/presentation/controller/exceptionhandler/GlobalExceptionHandler.java
  visible: true
  text: |
    package antifraud.presentation.controller.exceptionhandler;

    import antifraud.business.exception.EntityNotFoundException;
    import antifraud.business.exception.RoleConflictException;
    import antifraud.presentation.DTO.error.ErrorResponseDTO;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.validation.FieldError;
    import org.springframework.web.bind.MethodArgumentNotValidException;
    import org.springframework.web.bind.annotation.ControllerAdvice;
    import org.springframework.web.bind.annotation.ExceptionHandler;

    import javax.persistence.EntityExistsException;
    import javax.validation.ConstraintViolation;
    import javax.validation.ConstraintViolationException;
    import java.time.LocalDateTime;
    import java.util.ArrayList;
    import java.util.List;
    import java.util.Set;

    @ControllerAdvice
    public class GlobalExceptionHandler {

        @ExceptionHandler(MethodArgumentNotValidException.class)
        public ResponseEntity<ValidationError> handleInvalidArgumentException(MethodArgumentNotValidException ex) {
            List<FieldError> fieldErrors = ex.getBindingResult().getFieldErrors();
            ValidationError validationError = processFieldErrors(fieldErrors);
            return new ResponseEntity<>(validationError, HttpStatus.BAD_REQUEST);
        }

        @ExceptionHandler(ConstraintViolationException.class)
        public ResponseEntity<ValidationError> handleConstraintViolationException(ConstraintViolationException ex) {
            Set<ConstraintViolation<?>> constraintViolations = ex.getConstraintViolations();
            ValidationError validationError = processConstraintViolations(constraintViolations);
            return new ResponseEntity<>(validationError, HttpStatus.BAD_REQUEST);
        }

        @ExceptionHandler(IllegalArgumentException.class)
        public ResponseEntity<ErrorResponseDTO> handleIllegalArgumentException(IllegalArgumentException ex) {
            ErrorResponseDTO errorResponse = new ErrorResponseDTO(LocalDateTime.now(), HttpStatus.BAD_REQUEST.value(), ex.getMessage());
            return new ResponseEntity<>(errorResponse, HttpStatus.BAD_REQUEST);
        }

        @ExceptionHandler({RoleConflictException.class, EntityExistsException.class})
        public ResponseEntity<ErrorResponseDTO> handleExistingConflict(Exception ex) {
            ErrorResponseDTO errorResponse = new ErrorResponseDTO(LocalDateTime.now(), HttpStatus.CONFLICT.value(), ex.getMessage());
            return new ResponseEntity<>(errorResponse, HttpStatus.CONFLICT);
        }

        @ExceptionHandler(EntityNotFoundException.class)
        public ResponseEntity<ErrorResponseDTO> handleUserNotFound(EntityNotFoundException ex) {
            ErrorResponseDTO errorResponse = new ErrorResponseDTO(LocalDateTime.now(), HttpStatus.NOT_FOUND.value(), ex.getMessage());
            return new ResponseEntity<>(errorResponse, HttpStatus.NOT_FOUND);
        }

        private ValidationError processFieldErrors(List<FieldError> fieldErrors) {
            ValidationError validationError = new ValidationError(HttpStatus.BAD_REQUEST.value(), "Field Validation Error");
            for (FieldError fieldError : fieldErrors) {
                validationError.addCustomFieldError(fieldError.getField(),
                        fieldError.getDefaultMessage(),
                        fieldError.getRejectedValue());
            }
            return validationError;
        }

        private ValidationError processConstraintViolations(Set<ConstraintViolation<?>> constraintViolations) {
            ValidationError validationError = new ValidationError(HttpStatus.BAD_REQUEST.value(), "PathVariable Validation Error");
            for (ConstraintViolation<?> constraintViolation : constraintViolations) {
                validationError.addCustomFieldError(constraintViolation.getPropertyPath().toString(),
                        constraintViolation.getMessage(),
                        constraintViolation.getInvalidValue());
            }

            return validationError;
        }


        static class ValidationError {
            private final int statusCode;
            private final String message;
            private final List<CustomFieldError> fieldErrors = new ArrayList<>();

            ValidationError(int status, String message) {
                this.statusCode = status;
                this.message = message;
            }

            public int getStatusCode() {
                return statusCode;
            }

            public String getMessage() {
                return message;
            }

            public void addCustomFieldError(String field, String message, Object rejectedValue) {
                CustomFieldError error = new CustomFieldError(field, message, rejectedValue);
                fieldErrors.add(error);
            }

            public List<CustomFieldError> getFieldErrors() {
                return fieldErrors;
            }

            record CustomFieldError(String field, String message, Object rejectedValue) {
            }
        }
    }
  learner_created: true
- name: src/antifraud/presentation/DTO/user/UserRequestDTO.java
  visible: true
  text: |
    package antifraud.presentation.DTO.user;

    import javax.validation.constraints.NotBlank;

    public record UserRequestDTO(@NotBlank String name, @NotBlank String username,
                                 @NotBlank String password) {
    }
  learner_created: true
- name: src/antifraud/presentation/DTO/user/update/UpdateRoleRequestDTO.java
  visible: true
  text: |
    package antifraud.presentation.DTO.user.update;

    import javax.validation.constraints.NotBlank;

    public record UpdateRoleRequestDTO(@NotBlank String username, @NotBlank String role) {
    }
  learner_created: true
- name: src/antifraud/business/exception/InvalidRoleException.java
  visible: true
  text: |
    package antifraud.business.exception;

    public class InvalidRoleException extends IllegalArgumentException {

        public InvalidRoleException(String message) {
            super(message);
        }
    }
  learner_created: true
- name: src/antifraud/persistence/TransactionRepository.java
  visible: true
  text: |
    package antifraud.persistence;

    import antifraud.business.model.entity.Transaction;
    import org.springframework.data.jpa.repository.Query;
    import org.springframework.data.repository.CrudRepository;
    import org.springframework.data.repository.query.Param;
    import org.springframework.stereotype.Repository;

    import java.time.LocalDateTime;
    import java.util.List;

    @Repository
    public interface TransactionRepository extends CrudRepository<Transaction, Long> {

        @Query("SELECT COUNT(Distinct t.region) FROM Transaction t WHERE (t.dateTime BETWEEN :startTime AND :endTime) AND t.number = :number")
        int countDistinctRegionTransactionByNumberBetweenDatetime(@Param("startTime") LocalDateTime startTime,
                                                                  @Param("endTime") LocalDateTime endTime,
                                                                  @Param("number") String number);

        @Query("SELECT COUNT(Distinct t.ip) FROM Transaction t WHERE (t.dateTime BETWEEN :startTime AND :endTime) AND t.number = :number")
        int countDistinctIPTransactionByNumberBetweenDatetime(@Param("startTime") LocalDateTime startTime,
                                                              @Param("endTime") LocalDateTime endTime,
                                                              @Param("number") String number);

        @Query("SELECT t FROM Transaction t WHERE (t.dateTime BETWEEN :startTime AND :endTime) AND t.number = :number")
        List<Transaction> findAllTransactionByNumberBetweenDatetime(@Param("startTime") LocalDateTime startTime,
                                                                    @Param("endTime") LocalDateTime endTime,
                                                                    @Param("number") String number);

        <S extends Transaction> S save(S entity);
    }
  learner_created: true
- name: src/antifraud/presentation/validation/ValidIP.java
  visible: true
  text: |
    package antifraud.presentation.validation;

    import javax.validation.Constraint;
    import javax.validation.Payload;
    import java.lang.annotation.*;

    /**
     * The annotated element must be a valid ipv4 address.
     */
    @Documented
    @Target({ElementType.PARAMETER, ElementType.FIELD})
    @Retention(RetentionPolicy.RUNTIME)
    @Constraint(validatedBy = IPConstraintValidator.class)
    public @interface ValidIP {
        String message() default "Invalid IPV4 Address";

        Class<?>[] groups() default {};

        Class<? extends Payload>[] payload() default {};
    }
  learner_created: true
- name: src/antifraud/business/model/enums/StatusOperation.java
  visible: true
  text: |
    package antifraud.business.model.enums;

    public enum StatusOperation {
        LOCK, UNLOCK
    }
  learner_created: true
- name: src/antifraud/presentation/DTO/transaction/TransactionResponseDTO.java
  visible: true
  text: |
    package antifraud.presentation.DTO.transaction;

    import antifraud.business.model.enums.TransactionReason;
    import antifraud.business.model.enums.TransactionStatus;
    import com.fasterxml.jackson.annotation.JsonIgnore;
    import com.fasterxml.jackson.annotation.JsonProperty;

    import java.util.ArrayList;
    import java.util.Collection;
    import java.util.Collections;
    import java.util.List;

    public class TransactionResponseDTO {
        @JsonIgnore
        private final List<TransactionReason> transactionReasons;

        @JsonProperty("result")
        private TransactionStatus status;

        public TransactionResponseDTO() {
            this.transactionReasons = new ArrayList<>();
        }

        public TransactionStatus getStatus() {
            return status;
        }

        public void setStatus(TransactionStatus result) {
            this.status = result;
        }

        public void addReason(TransactionReason prohibitedReason) {
            transactionReasons.add(prohibitedReason);
        }

        @JsonProperty("info")
        public String getInfo() {
            if (transactionReasons.isEmpty()) {
                return "none";
            }
            StringBuilder infoBuilder = new StringBuilder();
            Collections.sort(transactionReasons);

            for (int i = 0; i < transactionReasons.size(); i++) {
                TransactionReason prohibitedReason = transactionReasons.get(i);
                String currentInfo = prohibitedReason.name().toLowerCase().replace('_', '-');
                if (i == transactionReasons.size() - 1) {
                    infoBuilder.append(currentInfo);
                } else {
                    infoBuilder.append(currentInfo).append(", ");
                }
            }
            return infoBuilder.toString();
        }
    }
  learner_created: true
- name: src/antifraud/presentation/DTO/ip/IPResponseDTO.java
  visible: true
  text: |
    package antifraud.presentation.DTO.ip;

    public record IPResponseDTO(long id, String ip) {
    }
  learner_created: true
- name: src/antifraud/presentation/DTO/StatusResponseDTO.java
  visible: true
  text: |
    package antifraud.presentation.DTO;

    public record StatusResponseDTO(String status) {
    }
  learner_created: true
- name: src/antifraud/business/security/SecurityConfig.java
  visible: true
  text: |
    package antifraud.business.security;

    import antifraud.business.services.UserService;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.context.annotation.Bean;
    import org.springframework.context.annotation.Configuration;
    import org.springframework.http.HttpMethod;
    import org.springframework.security.authentication.AuthenticationManager;
    import org.springframework.security.authentication.AuthenticationProvider;
    import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
    import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
    import org.springframework.security.config.annotation.web.builders.HttpSecurity;
    import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
    import org.springframework.security.config.http.SessionCreationPolicy;
    import org.springframework.security.core.AuthenticationException;
    import org.springframework.security.crypto.password.PasswordEncoder;
    import org.springframework.security.web.AuthenticationEntryPoint;
    import org.springframework.security.web.SecurityFilterChain;
    import org.springframework.stereotype.Component;

    import javax.servlet.ServletException;
    import javax.servlet.http.HttpServletRequest;
    import javax.servlet.http.HttpServletResponse;
    import java.io.IOException;

    @Configuration
    @EnableWebSecurity
    public class SecurityConfig {

        private final UserService userService;
        private final PasswordEncoder bcryptEncoder;
        private final RestAuthenticateEntryPoint restAuthenticateEntryPoint;

        @Autowired
        public SecurityConfig(UserService userService, PasswordEncoder bcryptEncoder,
                              RestAuthenticateEntryPoint restAuthenticateEntryPoint) {
            this.userService = userService;
            this.bcryptEncoder = bcryptEncoder;
            this.restAuthenticateEntryPoint = restAuthenticateEntryPoint;
        }

        @Bean
        public SecurityFilterChain filterChain(HttpSecurity httpSecurity, @Autowired AuthenticationManager authenticationManager) throws Exception {
            httpSecurity.httpBasic().authenticationEntryPoint(restAuthenticateEntryPoint)
                    .and()
                    .csrf().disable().headers().frameOptions().disable()
                    .and()
                    .authorizeRequests()
                    .antMatchers(HttpMethod.POST, "/api/auth/user").permitAll()
                    .mvcMatchers(HttpMethod.DELETE, "/api/auth/user/*").hasRole("ADMINISTRATOR")
                    .mvcMatchers(HttpMethod.GET, "/api/auth/list").hasAnyRole("ADMINISTRATOR", "SUPPORT")
                    .mvcMatchers(HttpMethod.PUT, "/api/auth/access").hasRole("ADMINISTRATOR")
                    .mvcMatchers(HttpMethod.PUT, "/api/auth/role").hasRole("ADMINISTRATOR")
                    .mvcMatchers(HttpMethod.POST, "/api/antifraud/transaction").hasRole("MERCHANT")
                    .mvcMatchers("/api/antifraud/suspicious-ip").hasRole("SUPPORT")
                    .mvcMatchers("/api/antifraud/suspicious-ip/*").hasRole("SUPPORT")
                    .mvcMatchers("/api/antifraud/stolencard").hasRole("SUPPORT")
                    .mvcMatchers("/api/antifraud/stolencard/*").hasRole("SUPPORT")
                    .antMatchers("/actuator/shutdown").permitAll()
                    .antMatchers("/h2-console/**").permitAll()
                    .anyRequest().authenticated()
                    .and()
                    .authenticationManager(authenticationManager)
                    .sessionManagement()
                    .sessionCreationPolicy(SessionCreationPolicy.STATELESS); // no session

            return httpSecurity.build();
        }

        @Bean
        public AuthenticationProvider authenticationProvider() {
            DaoAuthenticationProvider authenticationProvider = new DaoAuthenticationProvider();
            authenticationProvider.setUserDetailsService(userService);
            authenticationProvider.setPasswordEncoder(bcryptEncoder);
            return authenticationProvider;
        }

        @Bean
        public AuthenticationManager authenticationManager(HttpSecurity http) throws Exception {
            AuthenticationManagerBuilder authenticationManagerBuilder = http.getSharedObject(AuthenticationManagerBuilder.class);
            authenticationManagerBuilder.authenticationProvider(authenticationProvider());
            return authenticationManagerBuilder.build();
        }

        @Component
        static class RestAuthenticateEntryPoint implements AuthenticationEntryPoint {
            @Override
            public void commence(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException) throws IOException, ServletException {
                response.sendError(HttpServletResponse.SC_UNAUTHORIZED, authException.getMessage());
            }
        }


    }
  learner_created: true
- name: src/antifraud/business/exception/RoleConflictException.java
  visible: true
  text: |
    package antifraud.business.exception;

    public class RoleConflictException extends RuntimeException {
        public RoleConflictException(String message) {
            super(message);
        }
    }
  learner_created: true
- name: src/antifraud/business/security/validation/IPValidator.java
  visible: true
  text: |
    package antifraud.business.security.validation;

    import java.util.Arrays;

    public class IPValidator {

        public static boolean isValidIpv4(String ipv4) {
            String[] splitted = ipv4.split("\\.");

            if (splitted.length != 4) {
                return false;
            }

            try {
                return Arrays.stream(splitted).allMatch((ipString) -> {
                    int currentIP = Integer.parseInt(ipString);
                    return currentIP >= 0 && currentIP <= 255;
                });
            } catch (NumberFormatException ex) {
                throw new IllegalArgumentException(ex.getMessage());
            }


        }
    }
  learner_created: true
- name: src/antifraud/persistence/IPRepository.java
  visible: true
  text: |
    package antifraud.persistence;

    import antifraud.business.model.entity.IP;
    import org.springframework.data.repository.CrudRepository;
    import org.springframework.stereotype.Repository;

    import java.util.Optional;

    @Repository
    public interface IPRepository extends CrudRepository<IP, Long> {
        <S extends IP> S save(S entity);

        Optional<IP> findByIp(String ipv4);

        void delete(IP entity);

        Iterable<IP> findAll();
    }
  learner_created: true
- name: src/antifraud/business/model/enums/RoleEnum.java
  visible: true
  text: |
    package antifraud.business.model.enums;

    public enum RoleEnum {
        ADMINISTRATOR("Administrator Role"),
        MERCHANT("Basic Merchant Role"),
        SUPPORT("Special Support Role");

        private final String description;

        private RoleEnum(String description) {
            this.description = description;
        }

        public String getDescription() {
            return description;
        }
    }
  learner_created: true
- name: src/antifraud/presentation/DTO/user/update/UpdateStatusRequestDTO.java
  visible: true
  text: |
    package antifraud.presentation.DTO.user.update;

    import antifraud.business.model.enums.StatusOperation;

    import javax.validation.constraints.NotBlank;

    public record UpdateStatusRequestDTO(@NotBlank String username, StatusOperation operation) {
    }
  learner_created: true
- name: src/antifraud/presentation/validation/IPConstraintValidator.java
  visible: true
  text: |
    package antifraud.presentation.validation;

    import antifraud.business.security.validation.IPValidator;

    import javax.validation.ConstraintValidator;
    import javax.validation.ConstraintValidatorContext;

    public class IPConstraintValidator implements ConstraintValidator<ValidIP, String> {

        @Override
        public void initialize(ValidIP constraintAnnotation) {
        }

        @Override
        public boolean isValid(String value, ConstraintValidatorContext context) {
            if (value == null) {
                return false;
            }
            return IPValidator.isValidIpv4(value);
        }
    }
  learner_created: true
- name: src/antifraud/presentation/DTO/card/StolenCardResponseDTO.java
  visible: true
  text: |
    package antifraud.presentation.DTO.card;

    public record StolenCardResponseDTO(long id, String number) {
    }
  learner_created: true
- name: src/antifraud/presentation/DTO/ip/IPRequestDTO.java
  visible: true
  text: |
    package antifraud.presentation.DTO.ip;

    import antifraud.presentation.validation.ValidIP;

    public record IPRequestDTO(@ValidIP String ip) {
    }
  learner_created: true
- name: src/antifraud/business/services/UserService.java
  visible: true
  text: |
    package antifraud.business.services;

    import antifraud.business.exception.EntityNotFoundException;
    import antifraud.business.exception.InvalidRoleException;
    import antifraud.business.exception.RoleConflictException;
    import antifraud.business.model.entity.Role;
    import antifraud.business.model.entity.User;
    import antifraud.business.model.enums.RoleEnum;
    import antifraud.business.model.enums.StatusOperation;
    import antifraud.business.security.UserDetailsImpl;
    import antifraud.persistence.RoleRepository;
    import antifraud.persistence.UserRepository;
    import antifraud.presentation.DTO.user.UserRequestDTO;
    import antifraud.presentation.DTO.user.UserResponseDTO;
    import antifraud.presentation.DTO.user.update.UpdateRoleRequestDTO;
    import antifraud.presentation.DTO.user.update.UpdateStatusRequestDTO;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.security.core.userdetails.UserDetails;
    import org.springframework.security.core.userdetails.UserDetailsService;
    import org.springframework.security.core.userdetails.UsernameNotFoundException;
    import org.springframework.security.crypto.password.PasswordEncoder;
    import org.springframework.stereotype.Service;

    import javax.persistence.EntityExistsException;
    import java.util.ArrayList;
    import java.util.List;
    import java.util.Optional;

    @Service
    public class UserService implements UserDetailsService {
        private final UserRepository userRepository;
        private final RoleRepository roleRepository;
        private final PasswordEncoder bcryptEncoder;

        @Autowired
        public UserService(UserRepository userRepository, PasswordEncoder encoder,
                           RoleRepository roleRepository) {
            this.userRepository = userRepository;
            this.roleRepository = roleRepository;
            this.bcryptEncoder = encoder;
        }


        public List<UserResponseDTO> getAllUsers() {
            Iterable<User> userIterable = userRepository.findAll();
            List<UserResponseDTO> userResponseList = new ArrayList<>();
            for (User user : userIterable) {
                userResponseList.add(new UserResponseDTO(user.getId(), user.getName(), user.getUsername(), user.getRole().getName()));
            }
            return userResponseList;
        }


        public User registerNewUser(UserRequestDTO registerRequest) {
            boolean isFirstUser = userRepository.count() == 0;
            if (isFirstUser) {
                return registerNewAdmin(registerRequest);
            }

            boolean isUsernameAvailable = checkUsernameAvailability(registerRequest.username().toLowerCase());
            if (!isUsernameAvailable) {
                throw new EntityExistsException(registerRequest.username() + " is already registered!");
            }

            User user = new User(registerRequest.name(), registerRequest.username(), bcryptEncoder.encode(registerRequest.password()), new Role(RoleEnum.MERCHANT));
            user.setRole(preventRoleDuplicate(user.getRole()));
            userRepository.save(user);
            return user;
        }

        private User registerNewAdmin(UserRequestDTO registerRequest) {
            User user = new User(registerRequest.name(), registerRequest.username(), bcryptEncoder.encode(registerRequest.password()), new Role(RoleEnum.ADMINISTRATOR));
            userRepository.save(user);
            return user;
        }

        public User updateUserRole(UpdateRoleRequestDTO updateUserRoleRequest) {
            if (!updateUserRoleRequest.role().equals("SUPPORT") && !updateUserRoleRequest.role().equals("MERCHANT")) {
                throw new InvalidRoleException("Role must be SUPPORT or MERCHANT");
            }

            Optional<User> userToUpdate = userRepository.findByUsername(updateUserRoleRequest.username());
            if (userToUpdate.isEmpty()) {
                throw new EntityNotFoundException("Can't find the user to be updated.");
            }

            User foundUser = userToUpdate.get();
            if (foundUser.getRole().getName().equals(updateUserRoleRequest.role())) {
                throw new RoleConflictException("This user already has " + updateUserRoleRequest.role() + " role.");
            }

            Role role = preventRoleDuplicate(new Role(RoleEnum.valueOf(updateUserRoleRequest.role())));
            foundUser.setRole(role);

            return userRepository.save(foundUser);
        }

        public User updateUserStatus(UpdateStatusRequestDTO updateRequest) {
            Optional<User> userToUpdate = userRepository.findByUsername(updateRequest.username());
            if (userToUpdate.isEmpty()) {
                throw new EntityNotFoundException("Can't find the user to be updated.");
            }

            User foundUser = userToUpdate.get();

            boolean isLockRequested = updateRequest.operation().equals(StatusOperation.LOCK);

            if (foundUser.getRole().getName().equals("ADMINISTRATOR") && isLockRequested) {
                throw new IllegalArgumentException("ADMINISTRATOR account can't be locked!");
            }

            foundUser.setLocked(isLockRequested);

            return userRepository.save(foundUser);
        }


        public User deleteUserByUsername(String username) {
            Optional<User> user = userRepository.findByUsername(username);

            if (user.isEmpty()) {
                throw new EntityNotFoundException("Can't find the user to be deleted.");
            }

            User userToDelete = user.get();

            userRepository.delete(userToDelete);
            return userToDelete;
        }

        private Role preventRoleDuplicate(Role role) {
            Optional<Role> optionalRole = roleRepository.findByName(role.getName());

            return optionalRole.orElse(role);
        }

        private boolean checkUsernameAvailability(String username) {
            Optional<User> user = userRepository.findByUsername(username);

            return user.isEmpty();
        }


        @Override
        public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
            Optional<User> user = userRepository.findByUsername(username.toLowerCase());

            if (user.isEmpty()) {
                throw new UsernameNotFoundException("Username not found: " + username);
            }

            return new UserDetailsImpl(user.get());
        }


    }
  learner_created: true
- name: src/antifraud/presentation/controller/UserController.java
  visible: true
  text: |
    package antifraud.presentation.controller;

    import antifraud.business.exception.InvalidRoleException;
    import antifraud.business.model.entity.User;
    import antifraud.business.services.UserService;
    import antifraud.presentation.DTO.StatusResponseDTO;
    import antifraud.presentation.DTO.error.ErrorResponseDTO;
    import antifraud.presentation.DTO.user.UserRequestDTO;
    import antifraud.presentation.DTO.user.UserResponseDTO;
    import antifraud.presentation.DTO.user.delete.DeleteResponseDTO;
    import antifraud.presentation.DTO.user.update.UpdateRoleRequestDTO;
    import antifraud.presentation.DTO.user.update.UpdateStatusRequestDTO;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.*;

    import javax.validation.Valid;
    import java.time.LocalDateTime;
    import java.util.List;

    @RestController
    public class UserController {
        @Autowired
        private UserService userService;

        @GetMapping("/api/auth/list")
        public ResponseEntity<List<UserResponseDTO>> getAllUsers() {
            List<UserResponseDTO> userList = userService.getAllUsers();
            return new ResponseEntity<>(userList, HttpStatus.OK);
        }

        @PostMapping("/api/auth/user")
        public ResponseEntity<UserResponseDTO> register(@RequestBody @Valid UserRequestDTO registerRequest) {
            User user = userService.registerNewUser(registerRequest);
            UserResponseDTO registerResponse = new UserResponseDTO(user.getId(), user.getName(), user.getUsername(), user.getRole().getName());
            return new ResponseEntity<>(registerResponse, HttpStatus.CREATED);
        }

        @PutMapping("/api/auth/role")
        public ResponseEntity<UserResponseDTO> changeUserRole(@RequestBody @Valid UpdateRoleRequestDTO updateUserRoleRequest) {
            User updatedUser = userService.updateUserRole(updateUserRoleRequest);
            UserResponseDTO userResponse = new UserResponseDTO(updatedUser.getId(), updatedUser.getName(), updatedUser.getUsername(), updatedUser.getRole().getName());

            return new ResponseEntity<>(userResponse, HttpStatus.OK);
        }

        @PutMapping("/api/auth/access")
        public ResponseEntity<StatusResponseDTO> changeUserLockedStatus(@RequestBody @Valid UpdateStatusRequestDTO updateRequest) {
            User updatedUser = userService.updateUserStatus(updateRequest);
            String lockStatus = updatedUser.isLocked() ? "locked" : "unlocked";
            StatusResponseDTO updateStatusResponse = new StatusResponseDTO("User %s %s!".formatted(updatedUser.getUsername(), lockStatus));
            return new ResponseEntity<>(updateStatusResponse, HttpStatus.OK);
        }

        @DeleteMapping("/api/auth/user/{username}")
        public ResponseEntity<DeleteResponseDTO> deleteUserByUsername(@PathVariable String username) {
            User deletedUser = userService.deleteUserByUsername(username);
            return new ResponseEntity<>(new DeleteResponseDTO(deletedUser.getUsername(), "Deleted successfully!"), HttpStatus.OK);
        }

        @ExceptionHandler(InvalidRoleException.class)
        public ResponseEntity<ErrorResponseDTO> handleInvalidRole(Exception ex) {
            ErrorResponseDTO errorResponse = new ErrorResponseDTO(LocalDateTime.now(), HttpStatus.BAD_REQUEST.value(), ex.getMessage());
            return new ResponseEntity<>(errorResponse, HttpStatus.BAD_REQUEST);
        }

    }
  learner_created: true
- name: src/antifraud/persistence/UserRepository.java
  visible: true
  text: |
    package antifraud.persistence;

    import antifraud.business.model.entity.User;
    import org.springframework.data.repository.CrudRepository;
    import org.springframework.stereotype.Repository;

    import java.util.Optional;

    @Repository
    public interface UserRepository extends CrudRepository<User, Long> {
        Iterable<User> findAll();

        Optional<User> findByUsername(String username);

        long count();

        <S extends User> S save(S entity);
    }
  learner_created: true
- name: src/antifraud/presentation/validation/ValidCardNumber.java
  visible: true
  text: |
    package antifraud.presentation.validation;


    import javax.validation.Constraint;
    import javax.validation.Payload;
    import java.lang.annotation.*;

    /**
     * The annotated element must be a valid card number that has 16 digits
     * and validated by the Luhn Algorithm.
     */
    @Documented
    @Target({ElementType.PARAMETER, ElementType.FIELD})
    @Retention(RetentionPolicy.RUNTIME)
    @Constraint(validatedBy = CardNumberValidator.class)
    public @interface ValidCardNumber {
        String message() default "Invalid Card Number";

        Class<?>[] groups() default {};

        Class<? extends Payload>[] payload() default {};
    }
  learner_created: true
- name: src/antifraud/business/security/UserDetailsImpl.java
  visible: true
  text: |
    package antifraud.business.security;

    import antifraud.business.model.entity.User;
    import org.springframework.security.core.GrantedAuthority;
    import org.springframework.security.core.authority.SimpleGrantedAuthority;
    import org.springframework.security.core.userdetails.UserDetails;

    import java.util.Collection;
    import java.util.List;

    public class UserDetailsImpl implements UserDetails {
        private final String username;
        private final String password;
        private final String role;
        private final boolean isLocked;

        public UserDetailsImpl(User user) {
            username = user.getUsername();
            password = user.getPassword();
            role = "ROLE_" + user.getRole().getName();
            System.out.println(role);
            isLocked = user.isLocked();
        }


        @Override
        public Collection<? extends GrantedAuthority> getAuthorities() {
            return List.of(new SimpleGrantedAuthority(role));
        }

        @Override
        public String getPassword() {
            return password;
        }

        @Override
        public String getUsername() {
            return username;
        }

        @Override
        public boolean isAccountNonExpired() {
            return true;
        }

        @Override
        public boolean isAccountNonLocked() {
            return !isLocked;
        }

        @Override
        public boolean isCredentialsNonExpired() {
            return true;
        }

        @Override
        public boolean isEnabled() {
            return true;
        }
    }
  learner_created: true
- name: src/antifraud/persistence/StolenCardRepository.java
  visible: true
  text: |
    package antifraud.persistence;

    import antifraud.business.model.entity.StolenCard;
    import org.springframework.data.repository.CrudRepository;
    import org.springframework.stereotype.Repository;

    import java.util.Optional;

    @Repository
    public interface StolenCardRepository extends CrudRepository<StolenCard, Long> {
        <S extends StolenCard> S save(S entity);

        Optional<StolenCard> findByNumber(String number);

        void delete(StolenCard entity);

        Iterable<StolenCard> findAll();
    }
  learner_created: true
- name: src/antifraud/business/services/TransactionService.java
  visible: true
  text: |+
    package antifraud.business.services;

    import antifraud.business.model.entity.IP;
    import antifraud.business.model.entity.StolenCard;
    import antifraud.business.model.entity.Transaction;
    import antifraud.business.model.enums.Region;
    import antifraud.business.model.enums.TransactionReason;
    import antifraud.business.model.enums.TransactionStatus;
    import antifraud.persistence.IPRepository;
    import antifraud.persistence.StolenCardRepository;
    import antifraud.persistence.TransactionRepository;
    import antifraud.presentation.DTO.transaction.TransactionRequestDTO;
    import antifraud.presentation.DTO.transaction.TransactionResponseDTO;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.stereotype.Service;

    import java.util.*;


    @Service
    public class TransactionService {

        private final IPRepository ipRepository;
        private final StolenCardRepository stolenCardRepository;
        private final TransactionRepository transactionRepository;

        @Autowired
        public TransactionService(IPRepository ipRepository,
                                  StolenCardRepository stolenCardRepository,
                                  TransactionRepository transactionRepository) {
            this.ipRepository = ipRepository;
            this.stolenCardRepository = stolenCardRepository;
            this.transactionRepository = transactionRepository;
        }

        public TransactionResponseDTO beginTransaction(TransactionRequestDTO transactionRequest) {
            if (transactionRequest.amount() <= 0) {
                throw new IllegalArgumentException("Transaction amount is 0 or lower than 0!");
            }

            TransactionResponseDTO transactionResponseDTO = getTransactionResponse(transactionRequest);

            Transaction transaction = new Transaction(transactionRequest.amount(),
                    transactionRequest.ip(),
                    transactionRequest.number(),
                    transactionRequest.region(),
                    transactionRequest.dateTime(),
                    transactionResponseDTO.getStatus());

            transactionRepository.save(transaction);


            return transactionResponseDTO;
        }

        private TransactionResponseDTO getTransactionResponse(TransactionRequestDTO transactionRequest) {
            TransactionResponseDTO transactionResponseDTO = new TransactionResponseDTO();
            boolean isIPBlacklisted = checkIfIPBlacklisted(transactionRequest.ip());
            boolean isCardBlacklisted = checkIfCardBlacklisted(transactionRequest.number());


            List<Transaction> lastHourTransactionList = transactionRepository.findAllTransactionByNumberBetweenDatetime(
                    transactionRequest.dateTime().minusHours(1),
                    transactionRequest.dateTime(),
                    transactionRequest.number()
            );

            Set<String> sameIpSet = new HashSet<>();
            List<Transaction> distinctIPTransaction = lastHourTransactionList.stream().filter(e -> sameIpSet.add(e.getIp())).toList();

            Set<Region> sameRegionSet = new HashSet<>();
            List<Transaction> distinctRegionTransaction = lastHourTransactionList.stream().filter(e -> sameRegionSet.add(e.getRegion())).toList();

            int distinctIPTransactionCount = 0;
            int distinctRegionTransactionCount = 0;

            for (Transaction transaction : distinctIPTransaction) {
                if (!Objects.equals(transaction.getIp(), transactionRequest.ip())) {
                    distinctIPTransactionCount++;
                }
            }
            for (Transaction transaction : distinctRegionTransaction) {
                if (!Objects.equals(transaction.getRegion(), transactionRequest.region())) {
                    distinctRegionTransactionCount++;
                }
            }
            System.out.println(distinctIPTransactionCount);
            System.out.println(distinctRegionTransactionCount);

            if (isIPBlacklisted || isCardBlacklisted || transactionRequest.amount() > 1500
                    || distinctIPTransactionCount > 2 || distinctRegionTransactionCount > 2) {
                transactionResponseDTO.setStatus(TransactionStatus.PROHIBITED);
            } else if (transactionRequest.amount() > 200 || distinctIPTransactionCount == 2
                    || distinctRegionTransactionCount == 2) {
                transactionResponseDTO.setStatus(TransactionStatus.MANUAL_PROCESSING);
            } else {
                transactionResponseDTO.setStatus(TransactionStatus.ALLOWED);
            }

            addTransactionReason(transactionResponseDTO, transactionRequest.amount(),
                    isIPBlacklisted, isCardBlacklisted,
                    distinctIPTransactionCount, distinctRegionTransactionCount);

            return transactionResponseDTO;
        }

        private void addTransactionReason(
                TransactionResponseDTO transactionResponseDTO, long amount, boolean isIPBlacklisted,
                boolean isCardBlacklisted, int distinctIPTransactionCount, int distinctRegionTransactionCount
        ) {

            if (transactionResponseDTO.getStatus() == TransactionStatus.ALLOWED) {
                return;
            }

            if (transactionResponseDTO.getStatus() == TransactionStatus.PROHIBITED) {
                if (isIPBlacklisted) {
                    transactionResponseDTO.addReason(TransactionReason.IP);
                }

                if (isCardBlacklisted) {
                    transactionResponseDTO.addReason(TransactionReason.CARD_NUMBER);
                }

                if (distinctIPTransactionCount > 2) {
                    transactionResponseDTO.addReason(TransactionReason.IP_CORRELATION);
                }

                if (distinctRegionTransactionCount > 2) {
                    transactionResponseDTO.addReason(TransactionReason.REGION_CORRELATION);
                }

                if (amount > 1500) {
                    transactionResponseDTO.addReason(TransactionReason.AMOUNT);
                }


            } else {
                if (amount > 200) {
                    transactionResponseDTO.addReason(TransactionReason.AMOUNT);
                }

                if (distinctIPTransactionCount == 2) {
                    transactionResponseDTO.addReason(TransactionReason.IP_CORRELATION);
                }

                if (distinctRegionTransactionCount == 2) {
                    transactionResponseDTO.addReason(TransactionReason.REGION_CORRELATION);
                }
            }


        }

        private boolean checkIfIPBlacklisted(String ipAddress) {
            Optional<IP> ip = ipRepository.findByIp(ipAddress);

            return ip.isPresent();
        }

        private boolean checkIfCardBlacklisted(String cardNumber) {
            Optional<StolenCard> stolenCard = stolenCardRepository.findByNumber(cardNumber);

            return stolenCard.isPresent();
        }


    }

  learner_created: true
- name: src/antifraud/business/model/enums/TransactionReason.java
  visible: true
  text: |
    package antifraud.business.model.enums;

    public enum TransactionReason {
        AMOUNT, CARD_NUMBER, IP, IP_CORRELATION, REGION_CORRELATION
    }
  learner_created: true
- name: src/antifraud/business/model/entity/User.java
  visible: true
  text: |
    package antifraud.business.model.entity;

    import javax.persistence.*;

    @Entity
    @Table(name = "USERS")
    public class User {
        @Id
        @Column
        @GeneratedValue(strategy = GenerationType.AUTO)
        private long id;

        @Column
        private String name;

        @Column(unique = true)
        private String username;

        @Column
        private String password;

        @Column
        private boolean isLocked;

        @ManyToOne(optional = false, cascade = {CascadeType.MERGE, CascadeType.PERSIST})
        @JoinColumn(name = "role_id", nullable = false)
        private Role role;// should be prefixed with ROLE_

        public User() {
        }

        public User(String name, String username, String password, Role role) {
            this.username = username.toLowerCase();
            this.name = name;
            this.password = password;
            this.role = role;
            isLocked = !role.getName().equals("ADMINISTRATOR");
        }


        public long getId() {
            return id;
        }

        public void setId(long id) {
            this.id = id;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public String getUsername() {
            return username;
        }

        public void setUsername(String username) {
            this.username = username;
        }

        public String getPassword() {
            return password;
        }

        public void setPassword(String password) {
            this.password = password;
        }

        public Role getRole() {
            return role;
        }

        public void setRole(Role role) {
            this.role = role;
        }

        public boolean isLocked() {
            return isLocked;
        }

        public void setLocked(boolean locked) {
            isLocked = locked;
        }
    }
  learner_created: true
- name: src/antifraud/presentation/validation/CardNumberValidator.java
  visible: true
  text: |
    package antifraud.presentation.validation;

    import antifraud.business.security.validation.Luhn;

    import javax.validation.ConstraintValidator;
    import javax.validation.ConstraintValidatorContext;

    public class CardNumberValidator implements ConstraintValidator<ValidCardNumber, String> {
        @Override
        public void initialize(ValidCardNumber constraintAnnotation) {
        }

        @Override
        public boolean isValid(String value, ConstraintValidatorContext context) {
            if (value == null) {
                return false;
            }
            return Luhn.checkCardNumberValidity(value);
        }
    }
  learner_created: true
- name: src/antifraud/business/security/EncoderConfig.java
  visible: true
  text: |
    package antifraud.business.security;

    import org.springframework.context.annotation.Bean;
    import org.springframework.context.annotation.Configuration;
    import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;

    @Configuration
    public class EncoderConfig {
        @Bean
        public BCryptPasswordEncoder getEncoder() {
            return new BCryptPasswordEncoder();
        }
    }
  learner_created: true
- name: src/antifraud/presentation/DTO/user/delete/DeleteResponseDTO.java
  visible: true
  text: |
    package antifraud.presentation.DTO.user.delete;

    public record DeleteResponseDTO(String username, String status) {
    }
  learner_created: true
- name: src/antifraud/presentation/controller/AntiFraudController.java
  visible: true
  text: |
    package antifraud.presentation.controller;

    import antifraud.business.model.entity.IP;
    import antifraud.business.model.entity.StolenCard;
    import antifraud.business.services.CardService;
    import antifraud.business.services.IPService;
    import antifraud.business.services.TransactionService;
    import antifraud.presentation.DTO.StatusResponseDTO;
    import antifraud.presentation.DTO.card.StolenCardRequestDTO;
    import antifraud.presentation.DTO.card.StolenCardResponseDTO;
    import antifraud.presentation.DTO.ip.IPRequestDTO;
    import antifraud.presentation.DTO.ip.IPResponseDTO;
    import antifraud.presentation.DTO.transaction.TransactionRequestDTO;
    import antifraud.presentation.DTO.transaction.TransactionResponseDTO;
    import antifraud.presentation.validation.ValidCardNumber;
    import antifraud.presentation.validation.ValidIP;
    import org.slf4j.Logger;
    import org.slf4j.LoggerFactory;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.validation.annotation.Validated;
    import org.springframework.web.bind.annotation.*;

    import javax.validation.Valid;
    import java.util.List;

    @RestController
    @Validated
    public class AntiFraudController {
        private final TransactionService transactionService;
        private final IPService ipService;
        private final CardService cardService;
        private final Logger logger = LoggerFactory.getLogger(AntiFraudController.class);

        @Autowired
        public AntiFraudController(TransactionService transactionService, IPService ipService, CardService cardService) {
            this.transactionService = transactionService;
            this.ipService = ipService;
            this.cardService = cardService;
        }

        @PostMapping("/api/antifraud/transaction")
        public ResponseEntity<TransactionResponseDTO> checkFraud(@RequestBody @Valid TransactionRequestDTO transaction) {
            logger.info(String.valueOf(transaction.dateTime()));
            TransactionResponseDTO transactionResponseDTO = transactionService.beginTransaction(transaction);
            return new ResponseEntity<>(transactionResponseDTO, HttpStatus.OK);
        }

        @GetMapping("/api/antifraud/suspicious-ip")
        public ResponseEntity<List<IPResponseDTO>> getAllSuspiciousIP() {
            List<IPResponseDTO> ipResponseDTOS = ipService.getAllSuspiciousIPDTO();
            return new ResponseEntity<>(ipResponseDTOS, HttpStatus.OK);
        }

        @PostMapping("/api/antifraud/suspicious-ip")
        public ResponseEntity<IPResponseDTO> saveSuspiciousIP(@RequestBody @Valid IPRequestDTO ipRequestDTO) {
            IP savedIP = ipService.saveSuspiciousIp(ipRequestDTO);
            return new ResponseEntity<>(new IPResponseDTO(savedIP.getId(), savedIP.getIp()), HttpStatus.OK);
        }

        @DeleteMapping("/api/antifraud/suspicious-ip/{ip}")
        public ResponseEntity<StatusResponseDTO> removeSuspiciousIP(@PathVariable("ip") @ValidIP String ipAddress) {
            ipService.deleteSuspiciousIP(ipAddress);

            return new ResponseEntity<>(new StatusResponseDTO("IP %s successfully removed!".formatted(ipAddress)), HttpStatus.OK);
        }

        @GetMapping("/api/antifraud/stolencard")
        public ResponseEntity<List<StolenCardResponseDTO>> getAllStolenCards() {
            List<StolenCardResponseDTO> stolenCards = cardService.getAllStolenCards();

            return new ResponseEntity<>(stolenCards, HttpStatus.OK);
        }

        @PostMapping("/api/antifraud/stolencard")
        public ResponseEntity<StolenCardResponseDTO> saveStolenCard(@RequestBody @Valid StolenCardRequestDTO stolenCardRequestDTO) {
            StolenCard savedCard = cardService.saveCardAsStolen(stolenCardRequestDTO);

            return new ResponseEntity<>(new StolenCardResponseDTO(savedCard.getId(), savedCard.getNumber()), HttpStatus.OK);
        }

        @DeleteMapping("/api/antifraud/stolencard/{number}")
        public ResponseEntity<StatusResponseDTO> deleteStolenCard(@PathVariable("number") @ValidCardNumber String cardNumber) {
            cardService.deleteCardByNumber(cardNumber);
            StatusResponseDTO statusResponseDTO = new StatusResponseDTO("Card %s successfully removed!".formatted(cardNumber));
            return new ResponseEntity<>(statusResponseDTO, HttpStatus.OK);
        }

    }
  learner_created: true
- name: src/antifraud/persistence/RoleRepository.java
  visible: true
  text: |
    package antifraud.persistence;

    import antifraud.business.model.entity.Role;
    import org.springframework.data.repository.CrudRepository;
    import org.springframework.stereotype.Repository;

    import java.util.Optional;

    @Repository
    public interface RoleRepository extends CrudRepository<Role, Integer> {
        Optional<Role> findByName(String name);
    }
  learner_created: true
- name: src/antifraud/business/exception/EntityNotFoundException.java
  visible: true
  text: |
    package antifraud.business.exception;

    public class EntityNotFoundException extends RuntimeException {

        public EntityNotFoundException(String message) {
            super(message);
        }
    }
  learner_created: true
- name: src/antifraud/business/model/entity/Role.java
  visible: true
  text: |
    package antifraud.business.model.entity;

    import antifraud.business.model.enums.RoleEnum;
    import org.springframework.security.core.GrantedAuthority;

    import javax.persistence.*;

    @Entity(name = "roles")
    public class Role implements GrantedAuthority {
        @Id
        @Column
        @GeneratedValue(strategy = GenerationType.AUTO)
        private int id;

        @Column(unique = true)
        private String name;

        @Column
        private String description;

        public Role(RoleEnum rolesEnum) {
            this.name = rolesEnum.toString();
            this.description = rolesEnum.getDescription();
        }

        public Role() {
        }

        public int getId() {
            return id;
        }

        public String getName() {
            return name;
        }

        public String getDescription() {
            return description;
        }

        @Override
        public String getAuthority() {
            return name;
        }
    }
  learner_created: true
- name: src/antifraud/business/model/enums/TransactionStatus.java
  visible: true
  text: |
    package antifraud.business.model.enums;

    public enum TransactionStatus {
        ALLOWED, MANUAL_PROCESSING, PROHIBITED
    }
  learner_created: true
- name: src/antifraud/business/security/validation/Luhn.java
  visible: true
  text: |
    package antifraud.business.security.validation;

    public class Luhn {
        public static String generateValidChecksum(String numberSequence) {
            int sum = 0;
            for (int i = 0; i < numberSequence.length(); i++) {
                int num = numberSequence.charAt(i) - '0';
                if (i % 2 == 0) {
                    num *= 2;
                    if (num > 9) {
                        num -= 9;
                    }
                }
                sum += num;
            }
            if (sum % 10 == 0) {
                return "0";
            }
            return String.valueOf(10 - (sum % 10));
        }

        public static boolean checkCardNumberValidity(String cardNumber) {
            if (cardNumber.length() != 16) {
                return false;
            }

            String noChecksumCard = cardNumber.substring(0, cardNumber.length() - 1);
            char validChecksum = generateValidChecksum(noChecksumCard).charAt(0);
            char cardChecksum = cardNumber.charAt(cardNumber.length() - 1);

            return cardChecksum == validChecksum;
        }
    }
  learner_created: true
- name: src/antifraud/presentation/DTO/error/ErrorResponseDTO.java
  visible: true
  text: |
    package antifraud.presentation.DTO.error;

    import java.time.LocalDateTime;

    public record ErrorResponseDTO(LocalDateTime dateTime, int statusCode, String message) {
    }
  learner_created: true
- name: src/antifraud/presentation/DTO/card/StolenCardRequestDTO.java
  visible: true
  text: |
    package antifraud.presentation.DTO.card;

    import antifraud.presentation.validation.ValidCardNumber;

    public record StolenCardRequestDTO(@ValidCardNumber String number) {
    }
  learner_created: true
- name: src/antifraud/business/model/entity/StolenCard.java
  visible: true
  text: |
    package antifraud.business.model.entity;

    import javax.persistence.*;

    @Entity
    @Table(name = "stolen_card")
    public class StolenCard {
        @Id
        @GeneratedValue(strategy = GenerationType.AUTO)
        private long id;

        @Column(unique = true)
        private String number;

        public StolenCard() {
        }

        public StolenCard(String number) {
            this.number = number;
        }

        public long getId() {
            return id;
        }

        public String getNumber() {
            return number;
        }
    }
  learner_created: true
- name: src/antifraud/business/services/IPService.java
  visible: true
  text: |
    package antifraud.business.services;

    import antifraud.business.exception.EntityNotFoundException;
    import antifraud.business.model.entity.IP;
    import antifraud.persistence.IPRepository;
    import antifraud.presentation.DTO.ip.IPRequestDTO;
    import antifraud.presentation.DTO.ip.IPResponseDTO;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.stereotype.Service;

    import javax.persistence.EntityExistsException;
    import java.util.ArrayList;
    import java.util.List;
    import java.util.Optional;

    @Service
    public class IPService {
        private final IPRepository ipRepository;

        @Autowired
        public IPService(IPRepository ipRepository) {
            this.ipRepository = ipRepository;
        }

        public IP saveSuspiciousIp(IPRequestDTO ipRequestDTO) {
            Optional<IP> existingIP = ipRepository.findByIp(ipRequestDTO.ip());

            if (existingIP.isPresent()) {
                throw new EntityExistsException("IP %s already exist!".formatted(ipRequestDTO.ip()));
            }

            return ipRepository.save(new IP(ipRequestDTO.ip()));
        }


        public void deleteSuspiciousIP(String ipAddress) {
            Optional<IP> ipToBeDeleted = ipRepository.findByIp(ipAddress);

            if (ipToBeDeleted.isEmpty()) {
                throw new EntityNotFoundException("IP %s doesn't exist.".formatted(ipAddress));
            }

            ipRepository.delete(ipToBeDeleted.get());
        }

        /**
         * Directly return DTO for performance, as for now there is no difference between IP DTO and IP Entity.
         */
        public List<IPResponseDTO> getAllSuspiciousIPDTO() {
            Iterable<IP> ipIterable = ipRepository.findAll();
            List<IPResponseDTO> ipDTOList = new ArrayList<>();

            for (IP ip : ipIterable) {
                ipDTOList.add(new IPResponseDTO(ip.getId(), ip.getIp()));
            }

            return ipDTOList;
        }
    }
  learner_created: true
- name: src/antifraud/business/model/entity/Card.java
  visible: true
  learner_created: true
- name: src/antifraud/persistence/CardRepository.java
  visible: true
  learner_created: true
- name: src/antifraud/business/services/StolenCardService.java
  visible: true
  text: |
    package antifraud.business.services;

    import antifraud.business.exception.EntityNotFoundException;
    import antifraud.business.model.entity.StolenCard;
    import antifraud.persistence.StolenCardRepository;
    import antifraud.presentation.DTO.card.StolenCardRequestDTO;
    import antifraud.presentation.DTO.card.StolenCardResponseDTO;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.stereotype.Service;

    import javax.persistence.EntityExistsException;
    import java.util.ArrayList;
    import java.util.List;
    import java.util.Optional;

    @Service
    public class CardService {
        private final StolenCardRepository stolenCardRepository;

        @Autowired
        public CardService(StolenCardRepository stolenCardRepository) {
            this.stolenCardRepository = stolenCardRepository;
        }

        public StolenCard saveCardAsStolen(StolenCardRequestDTO stolenCardRequestDTO) {
            Optional<StolenCard> cardInDB = stolenCardRepository.findByNumber(stolenCardRequestDTO.number());

            if (cardInDB.isPresent()) {
                throw new EntityExistsException("Card with number %s already exists!".formatted(stolenCardRequestDTO.number()));
            }

            return stolenCardRepository.save(new StolenCard(stolenCardRequestDTO.number()));
        }

        public void deleteCardByNumber(String cardNumber) {
            Optional<StolenCard> stolenCard = stolenCardRepository.findByNumber(cardNumber);

            if (stolenCard.isEmpty()) {
                throw new EntityNotFoundException("Card with number %s does not exists!".formatted(cardNumber));
            }

            stolenCardRepository.delete(stolenCard.get());
        }


        public List<StolenCardResponseDTO> getAllStolenCards() {
            Iterable<StolenCard> stolenCards = stolenCardRepository.findAll();

            List<StolenCardResponseDTO> stolenCardResponseDTOList = new ArrayList<>();
            for (StolenCard stolenCard : stolenCards) {
                stolenCardResponseDTOList.add(new StolenCardResponseDTO(stolenCard.getId(), stolenCard.getNumber()));
            }

            return stolenCardResponseDTOList;

        }
    }
  learner_created: true
- name: src/antifraud/business/services/CardService.java
  visible: true
  learner_created: true
- name: src/antifraud/presentation/DTO/transaction/TransactionDTO.java
  visible: true
  learner_created: true
- name: src/antifraud/presentation/jackson/serializers/NullAsEmptyStringSerializer.java
  visible: true
  learner_created: true
- name: src/antifraud/presentation/DTO/transaction/TransactionFeedbackDTO.java
  visible: true
  learner_created: true
- name: src/antifraud/business/exception/UnprocessableEntityException.java
  visible: true
  learner_created: true
- name: src/antifraud/business/exception/FeedbackConflictException.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/18072#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Sat, 20 May 2023 09:59:09 UTC"
record: 3
